/*******************************************************************************
 * Pattern builder for pattern androtext.applicationMainActivityIsTabActivity
 * Generated by EMF-IncQuery
 * Should contribute a pattern-builder to extension point
 * org.eclipse.viatra2.emf.incquery.codegen.patternmatcher.builder 
 *******************************************************************************/

package patternbuilders.androtext;

import java.util.HashMap;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.viatra2.emf.incquery.runtime.IStatelessGeneratedRetePatternBuilder;
import org.eclipse.viatra2.emf.incquery.runtime.term.VPMTermEvaluator;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.boundary.AbstractEvaluator;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.construction.ReteContainerBuildable;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.construction.RetePatternBuildException;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.construction.Stub;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.matcher.IPatternMatcherContext;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.network.Receiver;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.network.Supplier;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.remote.Address;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.tuple.FlatTuple;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.tuple.Tuple;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.tuple.TupleMask;

/**
 * Generated automatically from pattern androtext.applicationMainActivityIsTabActivity
 */
public class PatternBuilderForapplicationMainActivityIsTabActivity implements IStatelessGeneratedRetePatternBuilder {
	@Override
	public Address<? extends Receiver> construct(
			ReteContainerBuildable<String> buildable,
			IPatternMatcherContext<String> context, String gtPattern)
			throws RetePatternBuildException {
		assert("androtext.applicationMainActivityIsTabActivity".equals(gtPattern));
		buildable = buildable.getNextContainer().putOnTab("androtext.applicationMainActivityIsTabActivity");
		
		final Address<? extends Receiver> var_37 = buildable.patternCollector("androtext.applicationMainActivityIsTabActivity");
		final Stub<Address<? extends Supplier>> var_38 = buildable.buildStartStub(new Object[] {}, new Object[] {});
		final Object var_39 = EPackage.Registry.INSTANCE.getEPackage("http://www.bme.hu/mit/androtext/lang/AndroTextDsl").getEClassifier("TabActivity");
		final Stub<Address<? extends Supplier>> var_40 = buildable.unaryTypeStub(new FlatTuple(new Object[] {"Activity"}), var_39);
		final TupleMask var_41 = new TupleMask(new int[] {}, 0);
		final TupleMask var_42 = new TupleMask(new int[] {}, 1);
		final TupleMask var_43 = new TupleMask(new int[] {0}, 1);
		final Stub<Address<? extends Supplier>> var_44 = buildable.buildBetaNode(var_38, var_40, var_41, var_42, var_43, false);
		final Object var_45 = ((EClass) (EPackage.Registry.INSTANCE.getEPackage("http://www.bme.hu/mit/androtext/lang/AndroTextDsl").getEClassifier("AndroidApplication"))).getEStructuralFeature("mainActivity");
		final Stub<Address<? extends Supplier>> var_46 = buildable.binaryEdgeTypeStub(new FlatTuple(new Object[] {"Application", "Activity"}), var_45);
		final TupleMask var_47 = new TupleMask(new int[] {0}, 1);
		final TupleMask var_48 = new TupleMask(new int[] {1}, 2);
		final TupleMask var_49 = new TupleMask(new int[] {0}, 2);
		final Stub<Address<? extends Supplier>> var_50 = buildable.buildBetaNode(var_44, var_46, var_47, var_48, var_49, false);
		final Stub<Address<? extends Supplier>> var_51 = buildable.buildInjectivityChecker(var_50, 0, new int[] {1});
		final TupleMask var_52 = new TupleMask(new int[] {1, 0}, 2);
		final Stub<Address<? extends Supplier>> var_53 = buildable.buildTrimmer(var_51, var_52);
		buildable.buildConnection(var_53, var_37);
		return var_37;

	}
	
	HashMap<Object, Integer> posMapping;
	@Override
	public HashMap<Object, Integer> getPosMapping(String gtPattern) {
		assert("androtext.applicationMainActivityIsTabActivity".equals(gtPattern));
		if (posMapping == null) {
			posMapping = new HashMap<Object, Integer>();
			
			posMapping.put("Application", 0);
			posMapping.put("Activity", 1);

		}
		return posMapping;
	}
}
