/*******************************************************************************
 * Pattern builder for pattern androtext.uniqueApplicationModelElementName
 * Generated by EMF-IncQuery
 * Should contribute a pattern-builder to extension point
 * org.eclipse.viatra2.emf.incquery.codegen.patternmatcher.builder 
 *******************************************************************************/

package patternbuilders.androtext;

import java.util.HashMap;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.viatra2.emf.incquery.runtime.IStatelessGeneratedRetePatternBuilder;
import org.eclipse.viatra2.emf.incquery.runtime.term.VPMTermEvaluator;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.boundary.AbstractEvaluator;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.construction.ReteContainerBuildable;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.construction.RetePatternBuildException;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.construction.Stub;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.matcher.IPatternMatcherContext;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.network.Receiver;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.network.Supplier;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.remote.Address;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.tuple.FlatTuple;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.tuple.Tuple;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.tuple.TupleMask;

/**
 * Generated automatically from pattern androtext.uniqueApplicationModelElementName
 */
public class PatternBuilderForuniqueApplicationModelElementName implements IStatelessGeneratedRetePatternBuilder {
	@Override
	public Address<? extends Receiver> construct(
			ReteContainerBuildable<String> buildable,
			IPatternMatcherContext<String> context, String gtPattern)
			throws RetePatternBuildException {
		assert("androtext.uniqueApplicationModelElementName".equals(gtPattern));
		buildable = buildable.getNextContainer().putOnTab("androtext.uniqueApplicationModelElementName");
		
		final Address<? extends Receiver> var_145 = buildable.patternCollector("androtext.uniqueApplicationModelElementName");
		final Stub<Address<? extends Supplier>> var_146 = buildable.buildStartStub(new Object[] {}, new Object[] {});
		final Stub<Address<? extends Supplier>> var_147 = buildable.patternCallStub(new FlatTuple(new Object[] {"Element1", "Name1"}), "androtext.applicationModelElementHasName");
		final TupleMask var_148 = new TupleMask(new int[] {}, 0);
		final TupleMask var_149 = new TupleMask(new int[] {}, 2);
		final TupleMask var_150 = new TupleMask(new int[] {0, 1}, 2);
		final Stub<Address<? extends Supplier>> var_151 = buildable.buildBetaNode(var_146, var_147, var_148, var_149, var_150, false);
		final Stub<Address<? extends Supplier>> var_152 = buildable.patternCallStub(new FlatTuple(new Object[] {"Element2", "Name2"}), "androtext.applicationModelElementHasName");
		final TupleMask var_153 = new TupleMask(new int[] {}, 2);
		final TupleMask var_154 = new TupleMask(new int[] {}, 2);
		final TupleMask var_155 = new TupleMask(new int[] {0, 1}, 2);
		final Stub<Address<? extends Supplier>> var_156 = buildable.buildBetaNode(var_151, var_152, var_153, var_154, var_155, false);
		final AbstractEvaluator var_157 = new AbstractEvaluator(){ 
			@Override 
			public Object doEvaluate(Tuple tuple) throws Exception { 
				return VPMTermEvaluator.equals(tuple.get(1),tuple.get(3));
			}
		};
		final Stub<Address<? extends Supplier>> var_158 = buildable.buildPredicateChecker(var_157, null, new int[] {3, 1}, var_156);
		final Stub<Address<? extends Supplier>> var_159 = buildable.buildInjectivityChecker(var_158, 0, new int[] {2});
		final Stub<Address<? extends Supplier>> var_160 = buildable.buildInjectivityChecker(var_159, 0, new int[] {3});
		final Stub<Address<? extends Supplier>> var_161 = buildable.buildInjectivityChecker(var_160, 2, new int[] {1});
		final Stub<Address<? extends Supplier>> var_162 = buildable.buildInjectivityChecker(var_161, 1, new int[] {3});
		final TupleMask var_163 = new TupleMask(new int[] {0, 2, 1, 3}, 4);
		final Stub<Address<? extends Supplier>> var_164 = buildable.buildTrimmer(var_162, var_163);
		buildable.buildConnection(var_164, var_145);
		return var_145;

	}
	
	HashMap<Object, Integer> posMapping;
	@Override
	public HashMap<Object, Integer> getPosMapping(String gtPattern) {
		assert("androtext.uniqueApplicationModelElementName".equals(gtPattern));
		if (posMapping == null) {
			posMapping = new HashMap<Object, Integer>();
			
			posMapping.put("Element1", 0);
			posMapping.put("Element2", 1);
			posMapping.put("Name1", 2);
			posMapping.put("Name2", 3);

		}
		return posMapping;
	}
}
