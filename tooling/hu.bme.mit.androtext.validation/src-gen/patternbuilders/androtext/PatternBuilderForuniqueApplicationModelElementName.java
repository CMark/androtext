/*******************************************************************************
 * Pattern builder for pattern androtext.uniqueApplicationModelElementName
 * Generated by EMF-IncQuery
 * Should contribute a pattern-builder to extension point
 * org.eclipse.viatra2.emf.incquery.codegen.patternmatcher.builder 
 *******************************************************************************/

package patternbuilders.androtext;

import java.util.HashMap;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.viatra2.emf.incquery.runtime.IStatelessGeneratedRetePatternBuilder;
import org.eclipse.viatra2.emf.incquery.runtime.term.VPMTermEvaluator;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.boundary.AbstractEvaluator;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.construction.ReteContainerBuildable;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.construction.RetePatternBuildException;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.construction.Stub;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.matcher.IPatternMatcherContext;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.network.Receiver;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.network.Supplier;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.remote.Address;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.tuple.FlatTuple;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.tuple.Tuple;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.tuple.TupleMask;

/**
 * Generated automatically from pattern androtext.uniqueApplicationModelElementName
 */
public class PatternBuilderForuniqueApplicationModelElementName implements IStatelessGeneratedRetePatternBuilder {
	@Override
	public Address<? extends Receiver> construct(
			ReteContainerBuildable<String> buildable,
			IPatternMatcherContext<String> context, String gtPattern)
			throws RetePatternBuildException {
		assert("androtext.uniqueApplicationModelElementName".equals(gtPattern));
		buildable = buildable.getNextContainer().putOnTab("androtext.uniqueApplicationModelElementName");
		
		final Address<? extends Receiver> var_22 = buildable.patternCollector("androtext.uniqueApplicationModelElementName");
		final Stub<Address<? extends Supplier>> var_23 = buildable.buildStartStub(new Object[] {}, new Object[] {});
		final Stub<Address<? extends Supplier>> var_24 = buildable.patternCallStub(new FlatTuple(new Object[] {"Element1", "Name"}), "androtext.applicationModelElementHasName");
		final TupleMask var_25 = new TupleMask(new int[] {}, 0);
		final TupleMask var_26 = new TupleMask(new int[] {}, 2);
		final TupleMask var_27 = new TupleMask(new int[] {0, 1}, 2);
		final Stub<Address<? extends Supplier>> var_28 = buildable.buildBetaNode(var_23, var_24, var_25, var_26, var_27, false);
		final Stub<Address<? extends Supplier>> var_29 = buildable.patternCallStub(new FlatTuple(new Object[] {"Element2", "Name"}), "androtext.applicationModelElementHasName");
		final TupleMask var_30 = new TupleMask(new int[] {1}, 2);
		final TupleMask var_31 = new TupleMask(new int[] {1}, 2);
		final TupleMask var_32 = new TupleMask(new int[] {0}, 2);
		final Stub<Address<? extends Supplier>> var_33 = buildable.buildBetaNode(var_28, var_29, var_30, var_31, var_32, false);
		final Stub<Address<? extends Supplier>> var_34 = buildable.buildInjectivityChecker(var_33, 0, new int[] {2});
		final TupleMask var_35 = new TupleMask(new int[] {0, 2, 1}, 3);
		final Stub<Address<? extends Supplier>> var_36 = buildable.buildTrimmer(var_34, var_35);
		buildable.buildConnection(var_36, var_22);
		return var_22;

	}
	
	HashMap<Object, Integer> posMapping;
	@Override
	public HashMap<Object, Integer> getPosMapping(String gtPattern) {
		assert("androtext.uniqueApplicationModelElementName".equals(gtPattern));
		if (posMapping == null) {
			posMapping = new HashMap<Object, Integer>();
			
			posMapping.put("Element1", 0);
			posMapping.put("Element2", 1);
			posMapping.put("Name", 2);

		}
		return posMapping;
	}
}
