/*******************************************************************************
 * Pattern builder for pattern androtext.uniqueApplicationModelElementName
 * Generated by EMF-IncQuery
 * Should contribute a pattern-builder to extension point
 * org.eclipse.viatra2.emf.incquery.codegen.patternmatcher.builder 
 *******************************************************************************/

package patternbuilders.androtext;

import java.util.HashMap;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.viatra2.emf.incquery.runtime.IStatelessGeneratedRetePatternBuilder;
import org.eclipse.viatra2.emf.incquery.runtime.term.VPMTermEvaluator;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.boundary.AbstractEvaluator;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.construction.ReteContainerBuildable;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.construction.RetePatternBuildException;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.construction.Stub;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.matcher.IPatternMatcherContext;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.network.Receiver;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.network.Supplier;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.remote.Address;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.tuple.FlatTuple;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.tuple.Tuple;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.tuple.TupleMask;

/**
 * Generated automatically from pattern androtext.uniqueApplicationModelElementName
 */
public class PatternBuilderForuniqueApplicationModelElementName implements IStatelessGeneratedRetePatternBuilder {
	@Override
	public Address<? extends Receiver> construct(
			ReteContainerBuildable<String> buildable,
			IPatternMatcherContext<String> context, String gtPattern)
			throws RetePatternBuildException {
		assert("androtext.uniqueApplicationModelElementName".equals(gtPattern));
		buildable = buildable.getNextContainer().putOnTab("androtext.uniqueApplicationModelElementName");
		
		final Address<? extends Receiver> var_156 = buildable.patternCollector("androtext.uniqueApplicationModelElementName");
		final Stub<Address<? extends Supplier>> var_157 = buildable.buildStartStub(new Object[] {}, new Object[] {});
		final Stub<Address<? extends Supplier>> var_158 = buildable.patternCallStub(new FlatTuple(new Object[] {"Element1", "Name1"}), "androtext.applicationModelElementHasName");
		final TupleMask var_159 = new TupleMask(new int[] {}, 0);
		final TupleMask var_160 = new TupleMask(new int[] {}, 2);
		final TupleMask var_161 = new TupleMask(new int[] {0, 1}, 2);
		final Stub<Address<? extends Supplier>> var_162 = buildable.buildBetaNode(var_157, var_158, var_159, var_160, var_161, false);
		final Stub<Address<? extends Supplier>> var_163 = buildable.patternCallStub(new FlatTuple(new Object[] {"Element2", "Name2"}), "androtext.applicationModelElementHasName");
		final TupleMask var_164 = new TupleMask(new int[] {}, 2);
		final TupleMask var_165 = new TupleMask(new int[] {}, 2);
		final TupleMask var_166 = new TupleMask(new int[] {0, 1}, 2);
		final Stub<Address<? extends Supplier>> var_167 = buildable.buildBetaNode(var_162, var_163, var_164, var_165, var_166, false);
		final AbstractEvaluator var_168 = new AbstractEvaluator(){ 
			@Override 
			public Object doEvaluate(Tuple tuple) throws Exception { 
				return VPMTermEvaluator.equals(tuple.get(1),tuple.get(3));
			}
		};
		final Stub<Address<? extends Supplier>> var_169 = buildable.buildPredicateChecker(var_168, null, new int[] {3, 1}, var_167);
		final Stub<Address<? extends Supplier>> var_170 = buildable.buildInjectivityChecker(var_169, 0, new int[] {2});
		final Stub<Address<? extends Supplier>> var_171 = buildable.buildInjectivityChecker(var_170, 0, new int[] {3});
		final Stub<Address<? extends Supplier>> var_172 = buildable.buildInjectivityChecker(var_171, 2, new int[] {1});
		final Stub<Address<? extends Supplier>> var_173 = buildable.buildInjectivityChecker(var_172, 1, new int[] {3});
		final TupleMask var_174 = new TupleMask(new int[] {0, 2, 1, 3}, 4);
		final Stub<Address<? extends Supplier>> var_175 = buildable.buildTrimmer(var_173, var_174);
		buildable.buildConnection(var_175, var_156);
		return var_156;

	}
	
	HashMap<Object, Integer> posMapping;
	@Override
	public HashMap<Object, Integer> getPosMapping(String gtPattern) {
		assert("androtext.uniqueApplicationModelElementName".equals(gtPattern));
		if (posMapping == null) {
			posMapping = new HashMap<Object, Integer>();
			
			posMapping.put("Element1", 0);
			posMapping.put("Element2", 1);
			posMapping.put("Name1", 2);
			posMapping.put("Name2", 3);

		}
		return posMapping;
	}
}
