grammar hu.bme.mit.androtext.lang.AndroTextDsl with org.eclipse.xtext.common.Terminals

generate androTextDsl "http://www.bme.hu/mit/androtext/lang/AndroTextDsl"

import "http://www.eclipse.org/emf/2002/Ecore" as ecore

AndroTextModelRoot:
	('package' name=QualifiedName)?
	imports+=Import*
	actualModelRoot=ModelRoot;

ModelRoot:
	AndroGenModelRoot | 
	AndroidApplication | 
	AndroGuiModelRoot | 
	AndroDataModelRoot | 
	AndroResModelRoot | 
	AndroGameRoot
;

/* Common language elements */
Import:
	'import' importedNamespace=QualifiedNameWithWildCard;

QualifiedName:
	ID ('.'ID)*;

QualifiedNameWithWildCard :
	QualifiedName  ('.' '*')?;
/* End of Common language elements */

/* AndroGenModelRoot and model elements */
AndroGenModelRoot:
	{AndroGenModelRoot}
//	'generator' name=ID '{'
		targetApplications+=TargetApplication*	
//	'}'
;
	
TargetApplication:
	'target' application=[AndroidApplication | QualifiedName] '{'
		'project' projectName=QualifiedName
		('package' packageName=AndroidPackageName)?
		'platform' target=ApiLevel
		'version' version=VersionCode
	'}'
;

VersionCode: INT'.'INT;

AndroidPackageName:
	ID ('.'ID)+ 
;

enum ApiLevel:
	API8 = 'Android 2.2' | API9 = 'Android 2.3.1' |	API10 = 'Android 2.3.3' |
	API11 = 'Android 3.0' |	API12 = 'Android 3.1' |	API14 = 'Android 4.0'
;
/* End of AndroGenModelRoot and generator model elements */

/* AndroAppModelRoot and model elements */
AndroidApplication:
	'application' name=ID '{'
		mainActivity = AbstractActivity
		components+=AndroidApplicationComponent*
	'}';

AndroidApplicationComponent:
	AbstractActivity | ContentProvider
;

AbstractActivity returns AbstractActivity:
	Activity | TabActivity | ListActivity | BaseGameActivity | PreferenceActivity 
;

Activity returns AbstractActivity:
	{Activity}
	'activity' name=ID (theme=ActivityTheme)? '{'
		(customActions+=CustomAction)*
		(intentFilters+=IntentFilter)*
		('layout' layout=[View | QualifiedName])?
		(databinding=DataBinding)?
		(menu=ActivityMenu)?
		(contextMenu = ActivityContextMenu)?
	'}'
;

CustomAction returns CustomAction:
	{CustomAction}
	'action' name=QualifiedName
;

enum ActivityTheme:
	THEME | DIALOG | NOTITLEBAR | FULLSCREEN | LIGHT | DARK 
;

IntentFilter returns IntentFilter:
	{IntentFilter}
	'filter' (name=ID)? '{'
		(actions+=IntentAction)*
		('category' categories+=IntentCategory)*
		(datas+=IntentData)*
	'}'
;

IntentData:
	'data' entity=[Entity | QualifiedName] dataType=IntentDataType
;

IntentAction:
	'action' (type=IntentActionType | customAction=[CustomAction | QualifiedName])
;

enum IntentActionType:
	INSERT | VIEW | EDIT | PICK | DEFAULT | DELETE
;

enum IntentCategory:
	DEFAULT | ALTERNATIVE | SELECTED_ALTERNATIVE
;

enum IntentDataType:
	DIR | ITEM
;

TabActivity returns AbstractActivity:
	{TabActivity}
	'tabactivity' name=ID (theme=ActivityTheme)? '{'
		(customActions+=CustomAction)*
		(intentFilters+=IntentFilter)*
		(tabs+=Tab)*
		(menu=ActivityMenu)?
		(contextMenu = ActivityContextMenu)?
	'}'
;

Tab:
	'tab' tag=STRING '{' 
		'show' activity=[AbstractActivity | QualifiedName]
		'image' drawable=TabDrawableResourceLink
	'}';
	
ListActivity returns AbstractActivity:
	{ListActivity}
	'listactivity' name=ID (theme=ActivityTheme)?
	'{'
		(customActions+=CustomAction)*
		(intentFilters+=IntentFilter)*
		('listitem' listitem=[View | QualifiedName])?
		(databinding=DataBinding)?
		('onListItemClick' '{'
			onListItemClickAction=Action
		'}')?
		(menu=ActivityMenu)?
		(contextMenu = ActivityContextMenu)?
	'}'
;

ActivityContextMenu:
	'contextmenu' name=ID ('{'
		(menuElements+=ActivityMenuElement)*
	'}')?
;

ActivityMenu:
	'menu' name=ID ('{'
		(menuElements+=ActivityMenuElement)*
	'}')?
;

ActivityMenuElement returns ActivityMenuElement:
	ActivityMenuItem | ActivityMenuGroup
;

ActivityMenuItem returns ActivityMenuElement:
	{ActivityMenuItem}
	'item' name=ID title=STRING (icon=LinkableLink | icon=ExternalDrawableResourceLink)? 
	('{' 
		(onSelectedAction=Action | subMenu=ActivityMenu)?
	'}')?
;

ActivityMenuGroup returns ActivityMenuElement:
	{ActivityMenuGroup}
	'group' name=ID '{'
		(menuItems+=ActivityMenuItem)*
	'}'
;

DataBinding:
	(fetchAll?='fetchAll'|'fetchOne') (entity=[Entity | QualifiedName] ('('projection+=[Property | QualifiedName] (',' projection+=[Property | QualifiedName])*')')?)? 
	'from' contentProvider=[ContentProvider | QualifiedName]
	('bind' target+=[View | QualifiedName] (',' target+=[View | QualifiedName])*)?
;
	
PreferenceActivity returns AbstractActivity:
	{PreferenceActivity}
	'preferences' name=ID (theme=ActivityTheme)? '{'
		(customActions+=CustomAction)*
		(intentFilters+=IntentFilter)*
		('layout' screen=PreferenceScreen)?
		(menu=ActivityMenu)?
		(contextMenu = ActivityContextMenu)?
	'}'
;

ContentProvider returns ContentProvider:
	ResourceContentProvider | DatabaseContentProvider
;

DatabaseContentProvider returns ContentProvider:
	{DatabaseContentProvider}
	'provider' name=ID 'data' datamodel=[AndroDataModelRoot | QualifiedName]
;

ResourceContentProvider returns ContentProvider:
	{ResourceContentProvider}
	'resourceprovider' name=ID 'resource' arrayResource=[ArrayResource | QualifiedName]
;

Action returns Action:
	InvokeExplicitActivity |  InvokeImplicitActivity | DataAction
;

InvokeExplicitActivity returns Action:
	{InvokeExplicitActivity}
	'navigateTo' 
	'(' 
		(activity=[AbstractActivity | QualifiedName])
		(data=STRING)?
	')'
;

InvokeImplicitActivity returns Action:
	{InvokeImplicitActivity}
	'invoke' 
	'(' 
		(customAction=[CustomAction | QualifiedName] | action=IntentActionType)
		(data=STRING)? 
	')'
;

DataAction returns Action:
	{DataAction}
	type=DataActionType 
	entity=[Entity | QualifiedName]
	(values+=DataValue (',' values+=DataValue)*)?
;

DataValue:
	feature=[Property | QualifiedName] '=' value=STRING
;

enum DataActionType:
	insert | delete | update
;
/* End of AndroAppModelRoot and application model elements */

/* AndroDataModelRoot and model elements */
AndroDataModelRoot:
	'datamodel' name=ID '{'
		entities+=Entity*
	'}'
;

Entity:
	'entity' name=ID ('extends' superType=[Entity])? '{'
		properties+=Property*
	'}'
;

Property:
	name=ID	':' type=TypeRef
;

TypeRef:
	DataTypesRef | EntityTypeRef 
;

DataTypesRef:
	type = DataTypes
;

EntityTypeRef:
	type = [Entity | QualifiedName]
;

enum DataTypes:
	STRING='String' | FLOAT='float' | BOOLEAN='boolean' | INT='int';
/* End of AndroDataModelRoot and data model elements */

/* AndroGuiModelRoot and model elements */
AndroGuiModelRoot:
	{AndroGuiModelRoot}
	roots+=View*
;

View:
	ViewElement | Gallery | 
	ExpandableListView | 
	GridView | WebView | 
	ImageView | TextView | 
	EditText | Button | 
	ListView | ToggleButton | 
	RadioGroup | CheckBox | 
	RatingBar | Spinner |
	CheckedTextView |
	AutoCompleteTextView | 
	ViewGroup
;

ViewGroup returns ViewGroup:
	(	
		{AbsoluteLayout} 'absolutelayout' | 
		{LinearLayout} 'linearlayout' |
		{FrameLayout} 'framelayout' |
		{RelativeLayout} 'relativelayout' |
		{GridLayout} 'gridlayout' |
		{TableLayout} 'tablelayout' |
		{TableRow} 'tablerow'
	)
	name=ID 
	(layoutStyle=LayoutStyle)? 
	'{'
		attributes+=Attribute*
		views+=View*
	'}'
;

LayoutStyle:
	value=FastLayoutDimensionKind
;

enum FastLayoutDimensionKind:
	FILL='fill' | WRAP='wrap' | FILL_WRAP='fill&wrap' | WRAP_FILL='wrap&fill';

ViewElement:
	'view' 
	name=ID 
	(layoutStyle=LayoutStyle)? 
	('{'
		attributes+=Attribute*
	'}')?
;

TextView:
	'textview' 
	name=ID 
	(text=StringPropertyValue)? 
	(layoutStyle=LayoutStyle)? 
	('{' 
		attributes+=Attribute*
	'}')?
;
	
EditText:
	'edittext' 
	name=ID 
	(text=StringPropertyValue)? 
	(layoutStyle=LayoutStyle)? 
	('{'
		attributes+=Attribute*
	'}')?
;
	
Button:
	'button' 
	name=ID 
	text=StringPropertyValue 
	(layoutStyle=LayoutStyle)? 
	('{'
		attributes+=Attribute*
		(onClickAttribute=OnClickAttribute)?
	'}')?
;

Gallery:
	'gallery' 
	name=ID 
	(layoutStyle=LayoutStyle)? 
	('{'
		attributes+=Attribute*
	'}')?
;

ExpandableListView:
	'explistview' 
	name=ID 
	(layoutStyle=LayoutStyle)? 
	('{'
		attributes+=Attribute*
	'}')?
;

WebView:
	'webview'
	name=ID 
	(layoutStyle=LayoutStyle)? 
	('{'
		attributes+=Attribute*
	'}')?
;

ImageView:
	'imageview' 
	name=ID 
	(layoutStyle=LayoutStyle)? 
	('{'
		attributes+=Attribute*
	'}')?
;	
	
ListView:
	'listview' 
	name=ID 
	(layoutStyle=LayoutStyle)? 
	('{'
		attributes+=Attribute*
		(entriesAttribute=EntriesAttribute)?
		('listitem' layout=[View | QualifiedName])?
		('onListItemClick' onListItemClickAction=Action)?
	'}')?
;
	
GridView:
	'gridview' 
	name=ID 
	(layoutStyle=LayoutStyle)? 
	('{'
		attributes+=Attribute*
	'}')?
;
	
Spinner:
	'spinner' 
	name=ID 
	(entriesAttribute=EntriesAttribute)? 
	(layoutStyle=LayoutStyle)?
	('{'
		attributes+=Attribute*
	'}')?
;
	
CheckBox:
	'checkbox' 
	name=ID 
	text=StringPropertyValue 
	(layoutStyle=LayoutStyle)? 
	('{'
		attributes+=Attribute*
	'}')?;
	
RadioGroup:
	'radiogroup' 
	name=ID
	(layoutStyle=LayoutStyle)? 
	'{'  
		attributes+=Attribute*
		(radiobuttons+=RadioButton)+
	'}';
	
RatingBar:
	'ratingbar' 
	(name=ID)? 
	numStars=IntegerPropertyValue 
	(layoutStyle=LayoutStyle)? 
	('{'
		attributes+=Attribute*
	'}')?;
	
ToggleButton:
	'togglebutton' 
	name=ID 
	'textOn' textOn=StringPropertyValue 
	'textOff' textOff=StringPropertyValue 
	(layoutStyle=LayoutStyle)? 
	('{'
		attributes+=Attribute*
	'}')?;
	
RadioButton:
	'radiobutton' 
	name=ID 
	text=STRING 
	(layoutStyle=LayoutStyle)? 
	('{'
		attributes+=Attribute*
	'}')?;

CheckedTextView:
	'checkedtextview' 
	name=ID 
	text=STRING 
	(layoutStyle=LayoutStyle)? 
	('{'
		attributes+=Attribute*
	'}')?;

AutoCompleteTextView:
	'autocompletetextview' 
	name=ID 
	(entriesAttribute=EntriesAttribute)?
	('listitem' listItem=[View | QualifiedName])?
	(layoutStyle=LayoutStyle)?
	('multi' multi=BooleanPropertyValue)? 
	('{'
		attributes+=Attribute*
	'}')?;

/* Preference Framework Elements */
AbstractPreference:
	PreferenceElement | PreferenceContainer
;

PreferenceElement:
	Preference | DialogBasedPreference | CheckBoxPreference | RingtonePrefence
;

DialogBasedPreference:
	EditTextPreference | ListPreference
;

PreferenceContainer:
	PreferenceScreen | PreferenceCategory
;

Preference:
	'preference' (name=ID)? title=STRING ('{'
		('summary' summary=STRING)?
		('enabled' enabled=BOOL)?
		('persistent' persistent=BOOL)?
	'}')?
;

PreferenceScreen:
	'preferencescreen' (name=ID)? title=STRING '{'
		('summary' summary=STRING)?
		('enabled' enabled=BOOL)?
		('persistent' persistent=BOOL)?	
		(preferences+=AbstractPreference)*
	'}'
;

PreferenceCategory:
	'preferencecategory' title=STRING '{'
		(preferences+=AbstractPreference)*
	'}'
;

EditTextPreference:
	'edittextpreference' name=ID title=STRING ('{'
		('summary' summary=STRING)?
		('enabled' enabled=BOOL)?
		('persistent' persistent=BOOL)?
		('dialogTitle' dialogTitle=STRING)?
		('defaultValue' defaultValue=STRING)?
	'}')?;
	
ListPreference:
	'listpreference' name=ID title=STRING ('{'
		('summary' summary=STRING)?
		('enabled' enabled=BOOL)?
		('persistent' persistent=BOOL)?
		('dialogTitle' dialogTitle=STRING)?
		('defaultValue' defaultValue=STRING)?
		(entriesAttribute=EntriesAttribute)?
		'entryValues' entryValues=[StringArrayEntry | QualifiedName]
	'}')?
;
	
CheckBoxPreference:
	'checkboxpreference' name=ID title=STRING ('{'
		('summary' summary=STRING)?
		('enabled' enabled=BOOL)?
		('persistent' persistent=BOOL)?	
	'}')?
;
	
RingtonePrefence:
	'ringtonepreference' name=ID title=STRING ('{'
		('summary' summary=STRING)?
		('enabled' enabled=BOOL)?
		('persistent' persistent=BOOL)?	
	'}')?
;

/* XML attributes */
Attribute returns Attribute:
	{Attribute}
	name=ID ':' value=PropertyValue
;

OnClickAttribute:
	'onClick' action=Action	
;

EntriesAttribute:
	'entries' entries=[ArrayResource | QualifiedName]	
;

//SpanAttribute:
//	'span' span=IntegerPropertyValue
//;
//
//ColumnAttribute:
//	'column' column=IntegerPropertyValue
//;
//
//CenterVerticalAttribute:
//	'centerVertical' centerVertical=BooleanPropertyValue	
//;
//
//CenterInParentAttribute:
//	'centerInParent' centerInParent=BooleanPropertyValue
//;
//
//CenterHorizontalAttribute:
//	'centerHorizontal' centerHorizontal=BooleanPropertyValue	
//;
//
//ToRightOfAttribute:
//	'toRightOf' toRightOf=[View | QualifiedName]	
//;
//
//ToLeftOfAttribute:
//	'toLeftOf' toLeftOf=[View | QualifiedName]
//;
//
//AboveAttribute:
//	'above' above=[View | QualifiedName]	
//;
//
//BelowAttribute:
//	'below' below=[View | QualifiedName]
//;
//
//AlignLeftAttribute:
//	'alignLeft' alignLeft=[View | QualifiedName]	
//;
//
//AlignBottomAttribute:
//	'alignBottom' alignBottom=[View | QualifiedName]
//;

//AlignTopAttribute:
//	'alignTop' alignTop=[View | QualifiedName]
//;
//
//AlignParentLeftAttribute:
//	'alignParentLeft' alignParentLeft=BooleanPropertyValue
//;
//
//AlignParentTopAttribute:
//	'alignParentTop' alignParentTop=BooleanPropertyValue
//;
//
//AlignParentRightAttribute:
//	'alignParentRight' alignParentRight=BooleanPropertyValue
//;
//
//AlignParentBottomAttribute:
//	'alignParentBottom' alignParentBottom=BooleanPropertyValue
//;

//MarginBottomAttribute:
//	'marginBottom' marginBottom=DimensionPropertyValue
//;
//
//MarginRightAttribute:
//	'marginRight' marginRight=DimensionPropertyValue
//;
//
//MarginTopAttribute:
//	'marginTop' marginTop=DimensionPropertyValue
//;
//
//WeightAttribute:
//	'weight' weight=IntegerPropertyValue
//;
//
//MarginLeftAttribute:
//	'marginLeft' marginLeft=DimensionPropertyValue
//;

//TextStyleAttribute:
//	'textStyle' textStyle+=TextStyleKind ('|' textStyle+=TextStyleKind)*
//;
//
//TypefaceAttribute:
//	'typeface' typeface=TypefaceKind
//;
//
//TextColorAttribute:
//	'textColor' textColor=ColorPropertyValue
//;
//
//SingleLineAttribute:
//	'singleLine' singleLine=BooleanPropertyValue
//;
//
//PhoneNumberAttribute:
//	'phoneNumber' phoneNumber=BooleanPropertyValue
//;

//PasswordAttribute:
//	'password' password=BooleanPropertyValue
//;
//
//NumericAttribute:
//	'numeric' numeric+=NumericKind &('|' numeric+=NumericKind)?
//;

//HintAttribute:
//	'hint' hint=StringPropertyValue
//;

//EditableAttribute:
//	'editable' editable=BooleanPropertyValue
//;

//DigitsAttribute:
//	'digits' digits=StringPropertyValue
//;

//CapitalizeAttribute:
//	'capitalize' capitalize=CapitalizeKind
//;

//AutoTextAttribute:
//	'autoText' autoText=BooleanPropertyValue
//;
//
//IsScrollContainerAttribute:
//	'isScrollContainer' isScrollContainer=BooleanPropertyValue
//;
//
//
//FadeScrollBarsAttribute:
//	'fadeScrollBars' fadeScrollBars=BooleanPropertyValue
//;
//
//
//ClickableAttribute:
//	'clickable' clickable=BooleanPropertyValue
//;
//AutoLinkAttribute:
//	'autoLink' (all?='all' | autoLinkMask+=AutoLinkKind ('|' autoLinkMask+=AutoLinkKind)?)
//;
//WidthAttribute:
//	'width' width=DimensionPropertyValue
//;
//
//HeightAttribute:
//	'height' height=DimensionPropertyValue
//;
//
//PaddingAttribute:
//	'padding' padding=DimensionPropertyValue
//;
//
//GravityAttribute:
//	'gravity' gravity+=GravityKind ('|' gravity+=GravityKind)*
//;
//
//TextSizeAttribute:
//	'textSize' textSize=DimensionPropertyValue
//;
//BackgroundAttribute:
//	'background' background=AnyDrawablePropertyValue
//;
//
//ColumnWidthAttribute:
//	'columnWidth' columnWidth=DimensionPropertyValue
//;
//
//HorizontalSpacingAttribute:
//	'horizontalSpacing' horizontalSpacing=DimensionPropertyValue
//;
//
//NumColumnsAttribute:
//	'numColumns' (autofit?='auto_fit' | numColumns=IntegerPropertyValue)
//;
//
//StretchModeAttribute:
//	'stretchMode' stretchMode=StretchModeKind
//;
//VerticalSpacingAttribute:
//	'verticalSpacing' verticalSpacing=DimensionPropertyValue
//;
//StretchColumnsAttribute:
//	'stretch' stretchColumns+=IntegerPropertyValue (',' stretchColumns+=IntegerPropertyValue)?
//;
//ShrinkColumnsAttribute:
//	'shrink' shrinkColumns+=IntegerPropertyValue (',' shrinkColumns+=IntegerPropertyValue)?
//;
//CollapseColumnsAttribute:
//	'collapse' collapseColumns+=IntegerPropertyValue (',' collapseColumns+=IntegerPropertyValue)?
//;
/* End of XML attributes */
/* End of Preference Framework Elements */
/* End of AndroGuiModelRoot and gui model elements */

/* AndroRes ModelRoot and model elements */
AndroResModelRoot:
	'resources' name=ID '{'
		resources+=Resource*
	'}'
;

Linkable:
	Resource | View
;

LinkableLink:
	link=[Linkable | QualifiedName]
;

PropertyValue:
	StringPropertyValue | 
    IntegerPropertyValue | 
    BooleanPropertyValue | 
    AnyDrawablePropertyValue | 
    DimensionPropertyValue | 
    LayoutDimensionPropertyValue |
    EnumerationPropertyValue |
    NumColumnsPropertyValue |
    LinkableLink 
;

EnumerationPropertyValue returns EnumerationPropertyValue:
	GravityEnumerationPropertyValue 
	| NumericEnumerationPropertyValue 
	| StretchModeEnumerationPropertyValue
	| TextStyleEnumerationPropertyValue
	| TypefaceEnumerationPropertyValue
	| CapitalizeEnumerationPropertyValue
	| AutoLinkEnumerationPropertyValue
;

GravityEnumerationPropertyValue returns EnumerationPropertyValue:
	{GravityEnumerationPropertyValue}
	values+=GravityKind ('|' values+=GravityKind)*
;

enum GravityKind:
    top | bottom | left | right |
    center | center_vertical | center_horizontal |
    fill | fill_vertical | fill_horizontal |
    clip_vertical | clip_horizontal
;

NumericEnumerationPropertyValue returns EnumerationPropertyValue:
	{NumericEnumerationPropertyValue}
	values+=NumericKind ('|' values+=NumericKind)*
;

enum NumericKind:
	integer | signed | decimal
;

StretchModeEnumerationPropertyValue returns EnumerationPropertyValue:
	{StretchModeEnumerationPropertyValue}
	value=StretchModeKind
;

enum StretchModeKind:
	none | spacingWidth | columnWidth | spacingWidthUniform
;

TextStyleEnumerationPropertyValue returns EnumerationPropertyValue:
	{TextStyleEnumerationPropertyValue}
	values+=TextStyleKind ('|' values+=TextStyleKind)*
;

enum TextStyleKind:
    normal | bold | italic
;

TypefaceEnumerationPropertyValue returns EnumerationPropertyValue:
	{TypefaceEnumerationPropertyValue}
	value=TypefaceKind
;

enum TypefaceKind:
    normal | sans | serif | monospace
;

CapitalizeEnumerationPropertyValue returns EnumerationPropertyValue:
	{CapitalizeEnumerationPropertyValue}
	value=CapitalizeKind
;

enum CapitalizeKind:
	none | sentences | words | characters
;

AutoLinkEnumerationPropertyValue returns EnumerationPropertyValue:
	{AutoLinkEnumerationPropertyValue}
	values+=AutoLinkKind ('|' values+=AutoLinkKind)*
;

enum AutoLinkKind:
    all | web | email | phone | map
;

NumColumnsPropertyValue:
	autofit?='auto_fit' | numColumns=IntegerPropertyValue
;

AnyDrawablePropertyValue:
    ExternalDrawableResourceLink | ColorPropertyValue
;

StringPropertyValue:
    value=STRING 
;

IntegerPropertyValue:
	values+=INT (',' values+=INT)*
;

BooleanPropertyValue:
    value=BOOL 
;

ColorPropertyValue:
    value=HEX_COLOR 
;

LayoutDimensionPropertyValue:
	value=LayoutDimensionKind
;

enum LayoutDimensionKind:
	FILL='fill' | WRAP='wrap' | MATCH='match';

DimensionPropertyValue:
    value=DimensionValue
;

TabDrawableResourceLink:
	link = [TabDrawableResource | QualifiedName]
;

ExternalDrawableResourceLink:
	externalResource = AndroidDrawableResource
;

enum AndroidDrawableResource:
	edit_text | 
	editbox_background | 
	editbox_background_normal | 
	editbox_dropdown_dark_frame | 
	editbox_dropdown_light_frame |
	ic_menu_add |
	ic_menu_delete | 
	ic_menu_edit |
	ic_menu_help |
	ic_menu_more |
	ic_menu_revert |
	ic_menu_save |
	ic_menu_upload      
;


Resource returns Resource:
    StringResource | IntegerResource | BooleanResource
    | ColorResource | DimensionResource
    | ArrayResource | DrawableResource | TabDrawableResource
;

StringResource returns Resource:
	{StringResource}
    'string' name=ID '=' value=STRING
;

IntegerResource returns Resource:
	{IntegerResource}
    'integer' name=ID '=' value=INT
;

BooleanResource returns Resource:
	{BooleanResource}
    'bool' name=ID '=' value=BOOL
;

ColorResource returns Resource:
	{ColorResource}
    'color' name=ID '=' value=HEX_COLOR
;

DimensionResource returns Resource:
	{DimensionResource}
    'dimension' name=ID '=' value=DimensionValue
;

ArrayResource returns Resource:
    IntegerArrayResource | StringArrayResource
;

IntegerArrayResource returns ArrayResource:
	{IntegerArrayResource}
    'intarray' name=ID '{'
        (entries+=IntegerArrayEntry (',' entries+=IntegerArrayEntry)*) 
    '}'
;

IntegerArrayEntry:
	(name=ID '=')? value=INT
;

StringArrayResource returns ArrayResource:
	{StringArrayResource}
	'stringarray' name=ID '{' 
		( entries+=StringArrayEntry (',' entries+=StringArrayEntry)*)
	'}';
	
StringArrayEntry:
	(name=ID '=')? value=STRING;

DrawableResource returns Resource:
    BitmapDrawableResource | TransitionDrawableResource
;

BitmapDrawableResource returns DrawableResource:
	{BitmapDrawableResource}
    'drawable' name=ID '=' filename=ID
;

TransitionDrawableResource returns DrawableResource:
	{TransitionDrawableResource}
    'transition' name=ID
        from=[BitmapDrawableResource] '<->' to=[BitmapDrawableResource]
;

TabDrawableResource returns Resource:
	{TabDrawableResource}
	'tabdrawable' name=ID 'selected' selected=[BitmapDrawableResource] 'unselected' unselected=[BitmapDrawableResource]
;

DimensionValue:
    value=FLOAT metric=DimensionMetric
;

enum DimensionMetric:
	dp | sp | pt | px | mm | in
;

BOOL returns ecore::EBoolean:
    'true' | 'false'
;

FLOAT returns ecore::EFloat:
    INT ('.' INT)?
;

terminal HEX_COLOR:
  '#'
  ('0'..'9'|'A'..'F'|'a'..'f') ('0'..'9'|'A'..'F'|'a'..'f')
  ('0'..'9'|'A'..'F'|'a'..'f') ('0'..'9'|'A'..'F'|'a'..'f')
  ('0'..'9'|'A'..'F'|'a'..'f') ('0'..'9'|'A'..'F'|'a'..'f')
  (('0'..'9'|'A'..'F'|'a'..'f') ('0'..'9'|'A'..'F'|'a'..'f'))? 
;
/* End of AndroResModelRoot and resource model elements */

/* AndroGameModelRoot and game model elements based on AndEngine www.andengine.org */
BaseGameActivity returns AbstractActivity:
	{BaseGameActivity}
	'gameactivity' name=ID (theme=ActivityTheme)? '{'
		(customActions+=CustomAction)*
		(intentFilters+=IntentFilter)*
		('camera' size=Size)?
		('screen' orientation=ScreenOrientation)?
		('scene' scene=[Scene | QualifiedName])?
		(menu=ActivityMenu)?
		(contextMenu = ActivityContextMenu)?
	'}'
;

AndroGameRoot:
	{AndroGameRoot}
	androGameComponents+=(AndroGameComponent)*
;

AndroGameComponent:
	AndroGameGui | AndroGameLogic
;

AndroGameGui:
	'gamegui' name=ID '{' 
		(gameElements+=GameComponent)*
	'}'
;

AndroGameLogic:
	'gamelogic' name=ID '{'
		(box2dOptions=Box2DOptions)?
		(logicComponent+=LogicComponent)*
	'}'
;

Box2DOptions:
	'box2doptions' '{'
		'box2dgravity' gravity=FLOAT
	'}'
;

Joint:
	DistanceJoint | RevoluteJoint	
;

RevoluteJoint:
	'revolutejoint' name=ID 'between' first=[Body | QualifiedName] ',' second=[Body | QualifiedName]
;

DistanceJoint:
	'distancejoint' name=ID 'between' first=[Body | QualifiedName] ',' second=[Body | QualifiedName]
;

Body:
	BoxBody | CircleBody | LineBody
;

LineBody:
	'linebody' name=ID bodyType=BodyType 'fixture' fixture=[Fixture | QualifiedName]
;

CircleBody:
	'circlebody' name=ID bodyType=BodyType 'fixture' fixture=[Fixture | QualifiedName]
;

BoxBody:
	'boxbody' name=ID bodyType=BodyType 'fixture' fixture=[Fixture | QualifiedName]
;

Fixture:
	'fixture' name=ID 'density' density=FLOAT 'friction' friction=FLOAT 'restitution' restitution=FLOAT
;

enum BodyType:
	static | kinetic | dynamic
;

LogicComponent:
	Binding | Bindable | Joint | Fixture
;

Binding:
	'bind' bindable=[Bindable | QualifiedName] 'to' bindingTarget=BindingTarget 
;

Bindable:
	EntityModifier | Body //| SensorBindable
;

GameComponent:
	Scene | TextureRegion | Font
;

Scene:
	'scene'	name=ID (gameBackground=GameBackground)? '{'
		(entities+=GameEntity)*
	'}' | MenuScene
;

MenuScene:
	'menu' name=ID (gameBackground=GameBackground)? '{'
		(menuItems+=GameMenuItem)*
		(entities+=GameEntity)*
	'}'
;

GameBackground:
	'gamebg' (color=Color | textureRegion=[TextureRegion | QualifiedName]) 
;

GameMenuItem:
	'menuitem' name=ID ('text' text=STRING 'font' font=[Font | QualifiedName]  | 'texture' textureRegion=[TextureRegion | QualifiedName])
;

GameEntity:
	SimpleEntity | Line | Text | Rectangle | Sprite | AnimatedSprite
;

SimpleEntity:
	'entity' (name=ID)? position=Position (size=Size)? (color=Color)? '{'
		children+=GameEntity*
	'}'
;

BindingTarget:
	EntityBindingTarget
;

EntityBindingTarget:
	entity=[GameEntity | QualifiedName]	
;

EntityModifier:
	MoveModifier | MoveByModifier | ScaleModifier | AlphaModifier | RotationByModifier | RotationModifier | ColorModifier | LoopEntityModifier | SequenceEntityModifier 
;

SequenceEntityModifier:
	'sequence' name=ID modifiers+=[EntityModifier] (',' modifiers+=[EntityModifier])*
;

LoopEntityModifier:
	'loop' name=ID modifiers+=[EntityModifier] (',' modifiers+=[EntityModifier])* ('count' count=INT)?
;

MoveModifier:
	'move' name=ID duration=FLOAT from=FromDouble to=ToDouble
;

MoveByModifier:
	'moveby' name=ID duration=FLOAT by=ByDouble
;

ScaleModifier:
	'scale' name=ID duration=FLOAT from=FromSingle to=ToSingle
;

AlphaModifier:
	'alphamodifier' name=ID duration=FLOAT from=FromSingle to=ToSingle
;

RotationByModifier:
	'rotateby' name=ID duration=FLOAT by=BySingle
;

RotationModifier:
	'rotate' name=ID duration=FLOAT from=FromSingle to=ToSingle
;

ColorModifier: 
	'colormodifier' name=ID duration=FLOAT from=FromTriple to=ToTriple
;

ToTriple:
	'to''('first=FLOAT second=FLOAT third=FLOAT')'
;

FromTriple:
	'from''('first=FLOAT second=FLOAT third=FLOAT')'
;

ToDouble:
	'to''('x=FLOAT y=FLOAT')'
;

FromDouble:
	'from''('x=FLOAT y=FLOAT')'
;

ToSingle:
	'to' '('value=FLOAT')'
;

FromSingle:
	'from''('value=FLOAT')'
;

ByDouble:
	'by''('x=FLOAT y=FLOAT')'	
;

BySingle:
	'by''('value=FLOAT')'
;

Line:
	'line' (name=ID)? from=FromDouble to=ToDouble (color=Color)? ('lineWidth''('lineWidth=FLOAT')')?
;

Text:
	'text' (name=ID)? text=STRING position=Position (color=Color)? font=[Font | QualifiedName] (halign=HorizontalAlign)?
;

Rectangle:
	'rect' (name=ID)? position=Position size=Size color=Color
;

Sprite:
	'sprite' (name=ID)? position=Position (size=Size)? (color=Color)? textureRegion=[TextureRegion | QualifiedName] 
;

AnimatedSprite:
	'animsprite' (name=ID)? position=Position (size=Size)? (color=Color)? textureRegion=[TextureRegion | QualifiedName] animate=INT 
;

Color:
	'color''('(r=FLOAT g=FLOAT b=FLOAT (a=FLOAT)? | constantColor=ConstantColor)')'
;

Position:
	'pos''('x=SignedFloat y=SignedFloat')'
;

Size:
	'size''('w=SignedFloat h=SignedFloat')'
;

TextureRegion:
	'texture' name=ID fileName=STRING (tiled=Tiled)?
;

Tiled:
	'tiled''('column=INT row=INT')'
;

Font:
	'font' name=ID (type=FontType)? size=INT color=Color antialias?='antialias'
;

enum ConstantColor:
	BLACK | WHITE | RED | GREEN | BLUE | YELLOW
;

enum HorizontalAlign:
	LEFT | RIGHT | CENTER
;

enum FontType:
	BOLD | ITALIC | BOLD_ITALIC
;

enum ScreenOrientation:
	landscape | portrait
;

SignedFloat returns ecore::EFloat:
	'-'? FLOAT
;
/* End of AndroGameModelRoot and game model elements */