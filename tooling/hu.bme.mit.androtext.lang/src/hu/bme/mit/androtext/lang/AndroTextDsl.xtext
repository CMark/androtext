grammar hu.bme.mit.androtext.lang.AndroTextDsl with org.eclipse.xtext.common.Terminals

generate androTextDsl "http://www.bme.hu/mit/androtext/lang/AndroTextDsl"

import "http://www.eclipse.org/emf/2002/Ecore" as ecore

AndroTextModelRoot:
	('package' name=QualifiedName)?
	imports+=Import*
	actualModelRoot=ModelRoot;

ModelRoot:
	AndroGenModelRoot | AndroidApplication | AndroGuiModelRoot | AndroDataModelRoot | AndroResModelRoot | AndroGameRoot
;

/* Common language elements */
Import:
	'import' importedNamespace=QualifiedNameWithWildCard;

QualifiedName:
	ID ('.'ID)*;

QualifiedNameWithWildCard :
	QualifiedName  ('.' '*')?;
/* End of Common language elements */

/* AndroGenModelRoot and model elements */
AndroGenModelRoot:
	'generator' name=ID '{'
		targetApplications+=TargetApplication*	
	'}';
	
TargetApplication:
	'target' application=[AndroidApplication | QualifiedName] '{'
		'project' projectName=QualifiedName
		('package' packageName=AndroidPackageName)?
		'platform' target=ApiLevel
		'version' version=VersionCode
	'}'
;

VersionCode: INT'.'INT;

AndroidPackageName:
	ID ('.'ID)+ 
;

enum ApiLevel:
	API8 = 'Android 2.2' | API9 = 'Android 2.3.1' |	API10 = 'Android 2.3.3' |
	API11 = 'Android 3.0' |	API12 = 'Android 3.1' |	API14 = 'Android 4.0'
;
/* End of AndroGenModelRoot and generator model elements */

/* AndroAppModelRoot and model elements */
AndroidApplication:
	'application' name=ID '{'
		mainActivity = Activity
		modelElements+=AndroidApplicationModelElement*
	'}';

AndroidApplicationModelElement:
	Activity | ContentProvider
;

Activity:
	'activity' name=ID '{'
		('theme' theme=ActivityTheme)?
		(intentFilters+=IntentFilter)*
		'layout' layout=[View | QualifiedName]
		(menu=ActivityMenu)?
	'}'
	| TabActivity | ListActivity | BaseGameActivity | PreferenceActivity
;

enum ActivityTheme:
	DIALOG | NOTITLEBAR | FULLSCREEN | LIGHT | DARK 
;

IntentFilter:
	'filter' name=ID '{'
		(actions+=IntentAction)*
		('category' categories+=IntentCategory)*
		(datas+=IntentData)*
	'}'
;

IntentData:
	'data' entity=[Entity | QualifiedName] dataType=IntentDataType
;

IntentAction:
	'action' (name=ID | type=IntentActionType)
;

enum IntentActionType:
	INSERT | VIEW | EDIT | PICK | DEFAULT | DELETE
;

enum IntentCategory:
	DEFAULT | ALTERNATIVE | SELECTED_ALTERNATIVE
;

enum IntentDataType:
	DIR | ITEM
;

TabActivity:
	'tabactivity' name=ID '{'
		(tabs+=Tab)+
		('theme' theme=ActivityTheme)?
		(menu=ActivityMenu)?
	'}'
;

Tab:
	'tab' tag=STRING '{' 
		'show' activity=[Activity | QualifiedName]
		'image' drawable=TabDrawableResourceLink
	'}';
	
ListActivity:
	'listactivity' name=ID
	('{'
		('listitem' listitem=[View | QualifiedName])?
		(databinding=DataBinding)?
		('onListItemClick' onListItemClickAction=Action)?
		('theme' theme=ActivityTheme)?
		(menu=ActivityMenu)?
	'}')?
;

ActivityMenu:
	'menu' name=ID ('{'
		(menuElements+=ActivityMenuElement)*
	'}')?
;

ActivityMenuElement:
	ActivityMenuItem | ActivityMenuGroup
;

ActivityMenuItem:
	'item' name=ID title=STRING icon=AnyDrawablePropertyValue 
	('{' 
		(onSelectedAction=Action | subMenu=ActivityMenu)?
	'}')?
;

ActivityMenuGroup:
	'group' name=ID '{'
		(menuItems+=ActivityMenuItem)*
	'}'
;

DataBinding:
	(fetchAll?='fetchAll'|'fetchOne') (entity=[Entity | QualifiedName] ('('projection+=[Property | QualifiedName] (',' projection+=[Property | QualifiedName])*')')?)? 
	'from' contentProvider=[ContentProvider | QualifiedName]
	('bind' target+=[View | QualifiedName] (',' target+=[View | QualifiedName])*)?
;
	
PreferenceActivity:
	'preferences' name=ID '{'
		'layout' screen=PreferenceScreen
	'}'
;

ContentProvider returns ContentProvider:
	ResourceContentProvider | DatabaseContentProvider
;

DatabaseContentProvider returns ContentProvider:
	{DatabaseContentProvider}
	'provider' name=ID 'data' datamodel=[AndroDataModelRoot | QualifiedName]
;

ResourceContentProvider returns ContentProvider:
	{ResourceContentProvider}
	'resourceprovider' name=ID 'resource' arrayResource=[ArrayResource | QualifiedName]
;

Action returns Action:
	InvokeActivity //| InvokeWebUrl
;

InvokeActivity returns Action:
	{InvokeActivity}
	'navigateTo' activity=[Activity | QualifiedName]
;

//InvokeWebUrl:
//	'goto' url=STRING
//;
/* End of AndroAppModelRoot and application model elements */

/* AndroDataModelRoot and model elements */
AndroDataModelRoot:
	'datamodel' name=ID '{'
		entities+=Entity*
	'}'
;

Entity:
	'entity' name=ID ('extends' superType=[Entity])? '{'
		properties+=Property*
	'}'
;

Property:
	name=ID	':' type=TypeRef
;

TypeRef:
	DataTypesRef | EntityTypeRef 
;

DataTypesRef:
	type = DataTypes
;

EntityTypeRef:
	type = [Entity | QualifiedName]
;

enum DataTypes:
	STRING='String' | FLOAT='float' | BOOLEAN='boolean' | INT='int';
/* End of AndroDataModelRoot and data model elements */

/* AndroGuiModelRoot and model elements */
AndroGuiModelRoot:
	'guimodel' name=ID '{' 
		roots+=View*
		layoutAttributes+=LayoutProperties*
	'}'
;

View:
	SimpleView | ViewGroup
;

ViewGroup:
	LinearLayout | AbsoluteLayout | FrameLayout | RelativeLayout | GridLayout | TableLayout | TableRow
;

LayoutProperties:
	'layoutProperties' name=ID 
	'{'
		(
			(weightAttribute=WeightAttribute)?
			& (marginLeftAttribute=MarginLeftAttribute)?
			& (marginTopAttribute=MarginTopAttribute)?
			& (marginRightAttribute=MarginRightAttribute)?
			& (marginBottomAttribute=MarginBottomAttribute)?
			& (alignParentLeftAttribute=AlignParentLeftAttribute)?
			& (alignParentTopAttribute=AlignParentTopAttribute)?
			& (alignParentRightAttribute=AlignParentRightAttribute)?
			& (alignParentBottomAttribute=AlignParentBottomAttribute)?
			& (alignTopAttribute=AlignTopAttribute)?
			& (alignBottomAttribute=AlignBottomAttribute)?
			& (alignLeftAttribute=AlignLeftAttribute)?
			& (belowAttribute=BelowAttribute)?
			& (aboveAttribute=AboveAttribute)?
			& (toLeftOfAttribute=ToLeftOfAttribute)?
			& (toRightOfAttribute=ToRightOfAttribute)?
			& (centerHorizontalAttribute=CenterHorizontalAttribute)? 
			& (centerInParentAttribute=CenterInParentAttribute)?
			& (centerVerticalAttribute=CenterVerticalAttribute)?
			& (columnAttribute=ColumnAttribute)?
			& (spanAttribute=SpanAttribute)?
		)
	'}'
;

LayoutStyle:
	FastLayoutStyle | RegularLayoutStyle
;

RegularLayoutStyle:
	('width' width=LayoutDimensionPropertyValue)? 'height' height=LayoutDimensionPropertyValue
;

FastLayoutStyle:
	value=FastLayoutDimensionKind
;

AbsoluteLayout:
	'absolutelayout' 
	name=ID 
	(layoutStyle=LayoutStyle)? 
	('layout' layoutProperties=[LayoutProperties | QualifiedName])?
	'{'
		views+=View*
	'}';

LinearLayout:
	'linearlayout' name=ID 
	(vertical?='vertical'|'horizontal')? 
	(layoutStyle=LayoutStyle)? 
	('layout' layoutProperties=[LayoutProperties | QualifiedName])?
	(gravity=GravityAttribute)?
	'{'
		views+=View*
	'}';

FrameLayout:
	'framelayout' 
	name=ID 
	(layoutStyle=LayoutStyle)?
	('layout' layoutProperties=[LayoutProperties | QualifiedName])?
	'{'
		views+=View*
	'}';
	
RelativeLayout:
	'relativelayout' 
	name=ID 
	(layoutStyle=LayoutStyle)? 
	('layout' layoutProperties=[LayoutProperties | QualifiedName])?
	'{'
		views+=View*
	'}';
	
GridLayout:
	'girdlayout' 
	name=ID 
	(layoutStyle=LayoutStyle)? 
	('layout' layoutProperties=[LayoutProperties | QualifiedName])? 
	'{'
		views+=View*
	'}'
;

TableLayout:
	'tablelayout' 
	name=ID 
	(layoutStyle=LayoutStyle)? 
	('layout' layoutProperties=[LayoutProperties | QualifiedName])?
	(collapseColumnsAttribute=CollapseColumnsAttribute)?
	(shrinkColumnsAttribute=ShrinkColumnsAttribute)?
	(stretchColumnsAttribute=StretchColumnsAttribute)?
	'{'
		views+=View*
	'}'
;

TableRow:
	'tablerow' 
	name=ID 
	(layoutStyle=LayoutStyle)? 
	('layout' layoutProperties=[LayoutProperties | QualifiedName])?
	'{' 
		views+=View*
	'}'
;

SimpleView:
	ViewElement | Gallery | ExpandableListView | GridView | WebView | ImageView | TextView | EditText | Button | ListView | Spinner | RadioGroup | CheckBox | RatingBar | ToggleButton | CheckedTextView | AutoCompleteTextView
;

ViewElement:
	'view' 
	name=ID 
	(layoutStyle=LayoutStyle)? 
	('layout' layoutProperties=[LayoutProperties | QualifiedName])?
	'{'
		(backgroundAttribute=BackgroundAttribute)?
	'}'
;

TextView:
	'textview' 
	name=ID 
	(text=StringPropertyValue)? 
	(layoutStyle=LayoutStyle)? 
	('layout' layoutProperties=[LayoutProperties | QualifiedName])? 
	'{' 
		(
			// View properties
	      	(widthAttribute=WidthAttribute)?
	      	& (heightAttribute=HeightAttribute)?
	      	& (backgroundAttribute=BackgroundAttribute)?
	      	& (clickableAttribute=ClickableAttribute)?
	      	& (fadeScrollBarsAttribute=FadeScrollBarsAttribute)?
	      	& (isScrollContainerAttribute=IsScrollContainerAttribute)?
	      	
		    //TextView attributes
		    & (autoLinkAttribute=AutoLinkAttribute)?
		    & (autoTextAttribute=AutoTextAttribute)?
		    & (capitalizeAttribute=CapitalizeAttribute)?
		    & (digitsAttribute=DigitsAttribute)?
		    & (editableAttribute=EditableAttribute)?
		    & (hintAttribute=HintAttribute)?
		    & (numericAttribute=NumericAttribute)?
		    & (passwordAttribute=PasswordAttribute)?
		    & (phoneNumberAttribute=PhoneNumberAttribute)?
		    & (singleLineAttribute=SingleLineAttribute)?
		    & (textColorAttribute=TextColorAttribute)?
		    & (typefaceAttribute=TypefaceAttribute)?
		    & (textStyleAttribute=TextStyleAttribute)? 
		    & (gravityAttribute=GravityAttribute)?
			& (textSizeAttribute=TextSizeAttribute)?
			& (paddingAttribute=PaddingAttribute)?
		)
	'}'
;
	
EditText:
	'edittext' 
	name=ID 
	(text=StringPropertyValue)? 
	(layoutStyle=LayoutStyle)? 
	('layout' layoutProperties=[LayoutProperties | QualifiedName])? 
	'{'
		(
	      	(widthAttribute=WidthAttribute)?
	      	& (heightAttribute=HeightAttribute)?
	      	& (backgroundAttribute=BackgroundAttribute)?
	      	& (clickableAttribute=ClickableAttribute)?
	      	& (fadeScrollBarsAttribute=FadeScrollBarsAttribute)?
	      	& (isScrollContainerAttribute=IsScrollContainerAttribute)?
	      	
	      	& (autoLinkAttribute=AutoLinkAttribute)?
		    & (autoTextAttribute=AutoTextAttribute)?
		    & (capitalizeAttribute=CapitalizeAttribute)?
		    & (digitsAttribute=DigitsAttribute)?
		    & (editableAttribute=EditableAttribute)?
		    & (hintAttribute=HintAttribute)?
		    & (numericAttribute=NumericAttribute)?
		    & (passwordAttribute=PasswordAttribute)?
		    & (phoneNumberAttribute=PhoneNumberAttribute)?
		    & (singleLineAttribute=SingleLineAttribute)?
		    & (textColorAttribute=TextColorAttribute)?
		    & (typefaceAttribute=TypefaceAttribute)?
		    & (textStyleAttribute=TextStyleAttribute)? 	
			& (gravityAttribute=GravityAttribute)?
			& (textSizeAttribute=TextSizeAttribute)?
			& (paddingAttribute=PaddingAttribute)?
		)
	'}'
;
	
Button:
	'button' 
	name=ID 
	text=StringPropertyValue 
	(layoutStyle=LayoutStyle)? 
	('layout' layoutProperties=[LayoutProperties | QualifiedName])?
	'{'
		(
	      	(widthAttribute=WidthAttribute)?
	      	& (heightAttribute=HeightAttribute)?
	      	& (backgroundAttribute=BackgroundAttribute)?
	      	& (clickableAttribute=ClickableAttribute)?
	      	& (hintAttribute=HintAttribute)?
	      	& (onClickAttribute=OnClickAttribute)?
		)	
	'}'
;

Gallery:
	'gallery' 
	name=ID 
	(layoutStyle=LayoutStyle)? 
	('layout' layoutProperties=[LayoutProperties | QualifiedName])?
;

ExpandableListView:
	'explistview' 
	name=ID 
	(layoutStyle=LayoutStyle)? 
	('layout' layoutProperties=[LayoutProperties | QualifiedName])?
;

WebView:
	'webview'
	name=ID 
	(layoutStyle=LayoutStyle)? 
	('layout' layoutProperties=[LayoutProperties | QualifiedName])?
;

ImageView:
	'imageview' 
	name=ID 
	src=AnyDrawablePropertyValue 
	(layoutStyle=LayoutStyle)? 
	('layout' layoutProperties=[LayoutProperties | QualifiedName])?
	'{'
		(
	      	(widthAttribute=WidthAttribute)?
	      	& (heightAttribute=HeightAttribute)?
	      	& (backgroundAttribute=BackgroundAttribute)?
	      	& (clickableAttribute=ClickableAttribute)?
	      	& (fadeScrollBarsAttribute=FadeScrollBarsAttribute)?
	      	& (isScrollContainerAttribute=IsScrollContainerAttribute)?	
		)
	'}'
;	
	
ListView:
	'listview' 
	name=ID 
	(layoutStyle=LayoutStyle)? 
	('layout' layoutProperties=[LayoutProperties | QualifiedName])?
	'{'
		(entriesAttribute=EntriesAttribute)?
		('listitem' layout=[View | QualifiedName])?
		('onListItemClick' onListItemClickAction=Action)?
	'}'
;
	
GridView:
	'gridview' 
	name=ID 
	(layoutStyle=LayoutStyle)? 
	('layout' layoutProperties=[LayoutProperties | QualifiedName])? 
	'{'
		(
			(columnWidthAttribute=ColumnWidthAttribute)?
			& (horizontalSpacingAttribute=HorizontalSpacingAttribute)?
			& (verticalSpacingAttribute=VerticalSpacingAttribute)?
			& (numColumnsAttribute=NumColumnsAttribute)?
			& (stretchModeAttribute=StretchModeAttribute)?
			& (gravityAttribute=GravityAttribute)?
		)
	'}'
;
	
Spinner:
	'spinner' 
	name=ID 
	(entriesAttribute=EntriesAttribute)? 
	(layoutStyle=LayoutStyle)?
	('layout' layoutProperties=[LayoutProperties | QualifiedName])? 
	'{'
		(
	      	(widthAttribute=WidthAttribute)?
	      	& (heightAttribute=HeightAttribute)?
	      	& (backgroundAttribute=BackgroundAttribute)?
	      	& (clickableAttribute=ClickableAttribute)?
	      	& (fadeScrollBarsAttribute=FadeScrollBarsAttribute)?
	      	& (isScrollContainerAttribute=IsScrollContainerAttribute)?	
		)
	'}'
;
	
CheckBox:
	'checkbox' 
	name=ID 
	text=StringPropertyValue 
	(layoutStyle=LayoutStyle)? 
	('layout' layoutProperties=[LayoutProperties | QualifiedName])?
	('{'
	'}')?;
	
RadioGroup:
	'radiogroup' 
	name=ID 
	(orientation?='horizontal'|'vertical')? 
	(layoutStyle=LayoutStyle)? 
	('layout' layoutProperties=[LayoutProperties | QualifiedName])? 
	'{'  
		(radiobuttons+=RadioButton)+
	'}';
	
RatingBar:
	'ratingbar' 
	(name=ID)? 
	numStars=IntegerPropertyValue 
	(layoutStyle=LayoutStyle)? 
	('layout' layoutProperties=[LayoutProperties | QualifiedName])?
	('{'
	'}')?;
	
ToggleButton:
	'togglebutton' 
	name=ID 
	'textOn' textOn=StringPropertyValue 
	'textOff' textOff=StringPropertyValue 
	(layoutStyle=LayoutStyle)? 
	('layout' layoutProperties=[LayoutProperties | QualifiedName])?
	('{'
	'}')?;
	
RadioButton:
	'radiobutton' 
	name=ID 
	text=STRING 
	(layoutStyle=LayoutStyle)? 
	('layout' layoutProperties=[LayoutProperties | QualifiedName])?
	('{'
	'}')?;

CheckedTextView:
	'checkedtextview' 
	name=ID 
	text=STRING 
	(layoutStyle=LayoutStyle)? 
	('layout' layoutProperties=[LayoutProperties | QualifiedName])? 
	('{'
	'}')?;

AutoCompleteTextView:
	'autocompletetextview' 
	name=ID 
	(entriesAttribute=EntriesAttribute)?
	('listitem' listItem=[View | QualifiedName])?
	(layoutStyle=LayoutStyle)?
	('layout' layoutProperties=[LayoutProperties | QualifiedName])?
	('multi' multi=BooleanPropertyValue)? 
	('{'
	'}')?;

/* Preference Framework Elements */
AbstractPreference:
	PreferenceElement | PreferenceContainer
;

PreferenceElement:
	Preference | DialogBasedPreference | CheckBoxPreference | RingtonePrefence
;

DialogBasedPreference:
	EditTextPreference | ListPreference
;

PreferenceContainer:
	PreferenceScreen | PreferenceCategory
;

Preference:
	'preference' (name=ID)? title=STRING ('{'
		('summary' summary=STRING)?
		('enabled' enabled=BOOL)?
		('persistent' persistent=BOOL)?
	'}')?
;

PreferenceScreen:
	'preferencescreen' (name=ID)? title=STRING '{'
		('summary' summary=STRING)?
		('enabled' enabled=BOOL)?
		('persistent' persistent=BOOL)?	
		(preferences+=AbstractPreference)*
	'}'
;

PreferenceCategory:
	'preferencecategory' title=STRING '{'
		(preferences+=AbstractPreference)*
	'}'
;

EditTextPreference:
	'edittextpreference' name=ID title=STRING ('{'
		('summary' summary=STRING)?
		('enabled' enabled=BOOL)?
		('persistent' persistent=BOOL)?
		('dialogTitle' dialogTitle=STRING)?
		('defaultValue' defaultValue=STRING)?
	'}')?;
	
ListPreference:
	'listpreference' name=ID title=STRING ('{'
		('summary' summary=STRING)?
		('enabled' enabled=BOOL)?
		('persistent' persistent=BOOL)?
		('dialogTitle' dialogTitle=STRING)?
		('defaultValue' defaultValue=STRING)?
		(entriesAttribute=EntriesAttribute)?
		'entryValues' entryValues=[StringArrayEntry | QualifiedName]
	'}')?
;
	
CheckBoxPreference:
	'checkboxpreference' name=ID title=STRING ('{'
		('summary' summary=STRING)?
		('enabled' enabled=BOOL)?
		('persistent' persistent=BOOL)?	
	'}')?
;
	
RingtonePrefence:
	'ringtonepreference' name=ID title=STRING ('{'
		('summary' summary=STRING)?
		('enabled' enabled=BOOL)?
		('persistent' persistent=BOOL)?	
	'}')?
;

/* XML attributes */
OnClickAttribute:
	'onClick' action=Action	
;

SpanAttribute:
	'span' span=IntegerPropertyValue
;

ColumnAttribute:
	'column' column=IntegerPropertyValue
;

CenterVerticalAttribute:
	'centerVertical' centerVertical=BooleanPropertyValue	
;

CenterInParentAttribute:
	'centerInParent' centerInParent=BooleanPropertyValue
;

CenterHorizontalAttribute:
	'centerHorizontal' centerHorizontal=BooleanPropertyValue	
;

ToRightOfAttribute:
	'toRightOf' toRightOf=[View | QualifiedName]	
;

ToLeftOfAttribute:
	'toLeftOf' toLeftOf=[View | QualifiedName]
;

AboveAttribute:
	'above' above=[View | QualifiedName]	
;

BelowAttribute:
	'below' below=[View | QualifiedName]
;

AlignLeftAttribute:
	'alignLeft' alignLeft=[View | QualifiedName]	
;

AlignBottomAttribute:
	'alignBottom' alignBottom=[View | QualifiedName]
;

AlignTopAttribute:
	'alignTop' alignTop=[View | QualifiedName]
;

AlignParentLeftAttribute:
	'alignParentLeft' alignParentLeft=BooleanPropertyValue
;

AlignParentTopAttribute:
	'alignParentTop' alignParentTop=BooleanPropertyValue
;

AlignParentRightAttribute:
	'alignParentRight' alignParentRight=BooleanPropertyValue
;

AlignParentBottomAttribute:
	'alignParentBottom' alignParentBottom=BooleanPropertyValue
;

MarginBottomAttribute:
	'marginBottom' marginBottom=DimensionPropertyValue
;

MarginRightAttribute:
	'marginRight' marginRight=DimensionPropertyValue
;

MarginTopAttribute:
	'marginTop' marginTop=DimensionPropertyValue
;

WeightAttribute:
	'weight' weight=IntegerPropertyValue
;

MarginLeftAttribute:
	'marginLeft' marginLeft=DimensionPropertyValue
;

TextStyleAttribute:
	'textStyle' textStyle+=TextStyleKind ('|' textStyle+=TextStyleKind)*
;

TypefaceAttribute:
	'typeface' typeface=TypefaceKind
;

TextColorAttribute:
	'textColor' textColor=ColorPropertyValue
;

SingleLineAttribute:
	'singleLine' singleLine=BooleanPropertyValue
;

PhoneNumberAttribute:
	'phoneNumber' phoneNumber=BooleanPropertyValue
;

PasswordAttribute:
	'password' password=BooleanPropertyValue
;

NumericAttribute:
	'numeric' numeric+=NumericKind &('|' numeric+=NumericKind)?
;

enum NumericKind:
	integer | signed | decimal
;


HintAttribute:
	'hint' hint=StringPropertyValue
;

enum TypefaceKind:
    normal | sans | serif | monospace
;

enum TextStyleKind:
    normal | bold | italic
;

EditableAttribute:
	'editable' editable=BooleanPropertyValue
;

DigitsAttribute:
	'digits' digits=StringPropertyValue
;

CapitalizeAttribute:
	'capitalize' capitalize=CapitalizeKind
;

enum CapitalizeKind:
	none | sentences | words | characters
;

AutoTextAttribute:
	'autoText' autoText=BooleanPropertyValue
;

IsScrollContainerAttribute:
	'isScrollContainer' isScrollContainer=BooleanPropertyValue
;


FadeScrollBarsAttribute:
	'fadeScrollBars' fadeScrollBars=BooleanPropertyValue
;


ClickableAttribute:
	'clickable' clickable=BooleanPropertyValue
;


AutoLinkAttribute:
	'autoLink' (all?='all' | autoLinkMask+=AutoLinkKind ('|' autoLinkMask+=AutoLinkKind)?)
;

enum AutoLinkKind:
    web | email | phone | map
;

WidthAttribute:
	'width' width=DimensionPropertyValue
;

HeightAttribute:
	'height' height=DimensionPropertyValue
;

PaddingAttribute:
	'padding' padding=DimensionPropertyValue
;

GravityAttribute:
	'gravity' gravity+=GravityKind ('|' gravity+=GravityKind)*
;

TextSizeAttribute:
	'textSize' textSize=DimensionPropertyValue
;

BackgroundAttribute:
	'background' background=AnyDrawablePropertyValue
;

ColumnWidthAttribute:
	'columnWidth' columnWidth=DimensionPropertyValue
;

HorizontalSpacingAttribute:
	'horizontalSpacing' horizontalSpacing=DimensionPropertyValue
;

NumColumnsAttribute:
	'numColumns' (autofit?='auto_fit' | numColumns=IntegerPropertyValue)
;

StretchModeAttribute:
	'stretchMode' stretchMode=StretchModeKind
;

enum StretchModeKind:
	none | spacingWidth | columnWidth | spacingWidthUniform
;

VerticalSpacingAttribute:
	'verticalSpacing' verticalSpacing=DimensionPropertyValue
;

EntriesAttribute:
	'entries' entries=[ArrayResource | QualifiedName]	
;

StretchColumnsAttribute:
	'stretch' stretchColumns+=IntegerPropertyValue (',' stretchColumns+=IntegerPropertyValue)?
;

ShrinkColumnsAttribute:
	'shrink' shrinkColumns+=IntegerPropertyValue (',' shrinkColumns+=IntegerPropertyValue)?
;

CollapseColumnsAttribute:
	'collapse' collapseColumns+=IntegerPropertyValue (',' collapseColumns+=IntegerPropertyValue)?
;

enum GravityKind :
    top | bottom | left | right |
    center | center_vertical | center_horizontal |
    fill | fill_vertical | fill_horizontal |
    clip_vertical | clip_horizontal
;

enum FastLayoutDimensionKind:
	FILL='fill' | WRAP='wrap' | FILL_WRAP='fill&wrap' | WRAP_FILL='wrap&fill';
/* End of XML attributes */
/* End of Preference Framework Elements */
/* End of AndroGuiModelRoot and gui model elements */

/* AndroRes ModelRoot and model elements */
AndroResModelRoot:
	'resources' name=ID '{'
		resources+=Resource*
	'}'
;

PropertyValue:
    StringPropertyValue | IntegerPropertyValue | BooleanPropertyValue | AnyDrawablePropertyValue | DimensionPropertyValue | LayoutDimensionPropertyValue
;

AnyDrawablePropertyValue:
    DrawableResourceLink | ExternalDrawableResourceLink | ColorPropertyValue
;

StringPropertyValue:
    StringResourceLink | value=STRING
;

IntegerPropertyValue:
    IntegerResourceLink | value=INT
;

BooleanPropertyValue:
    BooleanResourceLink | value=BOOL
;

ColorPropertyValue:
    ColorResourceLink | value=HEX_COLOR
;

LayoutDimensionPropertyValue:
	DimensionPropertyValue | constValue=LayoutDimensionKind
;

enum LayoutDimensionKind:
	FILL='fill' | WRAP='wrap' | MATCH='match';

DimensionPropertyValue:
    DimensionResourceLink | value=DimensionValue
;

DrawableResourceLink:
	link = [DrawableResource | QualifiedName]
;

TabDrawableResourceLink:
	link = [TabDrawableResource | QualifiedName]
;

ExternalDrawableResourceLink:
	externalResource = AndroidDrawableResource
;

enum AndroidDrawableResource:
	edit_text | 
	editbox_background | 
	editbox_background_normal | 
	editbox_dropdown_dark_frame | 
	editbox_dropdown_light_frame |
	ic_menu_add |
	ic_menu_delete | 
	ic_menu_edit |
	ic_menu_help |
	ic_menu_more |
	ic_menu_revert |
	ic_menu_save |
	ic_menu_upload      
;

StringResourceLink:
	link = [StringResource | QualifiedName]
;

IntegerResourceLink:
	link = [IntegerResource | QualifiedName]
;

BooleanResourceLink:
	link = [BooleanResource | QualifiedName]
;

ColorResourceLink:
	link = [ColorResource | QualifiedName]
;

DimensionResourceLink:
	link = [DimensionResource | QualifiedName]
;

Resource:
    StringResource | IntegerResource | BooleanResource
    | ColorResource | DimensionResource
    | ArrayResource | DrawableResource | TabDrawableResource
;

StringResource:
    'string' name=ID '=' value=STRING
;

IntegerResource:
    'integer' name=ID '=' value=INT
;

BooleanResource:
    'bool' name=ID '=' value=BOOL
;

ColorResource:
    'color' name=ID '=' value=HEX_COLOR
;

DimensionResource:
    'dimension' name=ID '=' value=DimensionValue
;

ArrayResource:
    IntegerArrayResource | StringArrayResource
;

IntegerArrayResource:
    'intarray' name=ID '{'
        (entries+=IntegerArrayEntry (',' entries+=IntegerArrayEntry)*) 
    '}'
;

IntegerArrayEntry:
	(name=ID '=')? value=INT
;

StringArrayResource:
	'stringarray' name=ID '{' 
		( entries+=StringArrayEntry (',' entries+=StringArrayEntry)*)
	'}';
	
StringArrayEntry:
	(name=ID '=')? value=STRING;

DrawableResource:
    (BitmapDrawableResource | TransitionDrawableResource)
;

BitmapDrawableResource:
    'drawable' name=ID '=' filename=ID
;

TransitionDrawableResource:
    'transition' name=ID
        from=[BitmapDrawableResource] '<->' to=[BitmapDrawableResource]
;

TabDrawableResource:
	'tabdrawable' name=ID 'selected' selected=[BitmapDrawableResource] 'unselected' unselected=[BitmapDrawableResource]
;

DimensionValue:
    value=FLOAT metric=DimensionMetric
;

enum DimensionMetric:
	dp | sp | pt | px | mm | in
;

BOOL:
    'true' | 'false'
;

FLOAT returns ecore::EFloat:
    INT ('.' INT)?
;

terminal HEX_COLOR:
  '#'
  ('0'..'9'|'A'..'F'|'a'..'f') ('0'..'9'|'A'..'F'|'a'..'f')
  ('0'..'9'|'A'..'F'|'a'..'f') ('0'..'9'|'A'..'F'|'a'..'f')
  ('0'..'9'|'A'..'F'|'a'..'f') ('0'..'9'|'A'..'F'|'a'..'f')
  (('0'..'9'|'A'..'F'|'a'..'f') ('0'..'9'|'A'..'F'|'a'..'f'))? 
;
/* End of AndroResModelRoot and resource model elements */

/* AndroGameModelRoot and game model elements based on AndEngine www.andengine.org */
BaseGameActivity:
	'gameactivity' name=ID '{'
		('camera' size=Size)?
		& ('orientation' orientation=ScreenOrientation)?
		& ('scene' scene=[Scene | QualifiedName])?
	'}'
;

AndroGameRoot:
	{AndroGameRoot}
	androGameComponents+=(AndroGameComponent)*
;

AndroGameComponent:
	AndroGameGui | AndroGameLogic
;

AndroGameGui:
	'gamegui' name=ID '{' 
		(gameElements+=GameComponent)*
	'}'
;

AndroGameLogic:
	'gamelogic' name=ID '{'
		(box2dOptions=Box2DOptions)?
		(logicComponent+=LogicComponent)*
	'}'
;

Box2DOptions:
	'box2doptions' '{'
		'gravity' gravity=FLOAT
	'}'
;

Joint:
	DistanceJoint | RevoluteJoint	
;

RevoluteJoint:
	'revolutejoint' name=ID 'between' first=[Body | QualifiedName] ',' second=[Body | QualifiedName]
;

DistanceJoint:
	'distancejoint' name=ID 'between' first=[Body | QualifiedName] ',' second=[Body | QualifiedName]
;

Body:
	BoxBody | CircleBody | LineBody
;

LineBody:
	'linebody' name=ID bodyType=BodyType 'fixture' fixture=[Fixture | QualifiedName]
;

CircleBody:
	'circlebody' name=ID bodyType=BodyType 'fixture' fixture=[Fixture | QualifiedName]
;

BoxBody:
	'boxbody' name=ID bodyType=BodyType 'fixture' fixture=[Fixture | QualifiedName]
;

Fixture:
	'fixture' name=ID 'density' density=FLOAT 'friction' friction=FLOAT 'restitution' restitution=FLOAT
;

enum BodyType:
	static | kinetic | dynamic
;

LogicComponent:
	Binding | Bindable | Joint | Fixture
;

Binding:
	'bind' bindable=[Bindable | QualifiedName] 'to' bindingTarget=BindingTarget 
;

Bindable:
	EntityModifier | Body //| SensorBindable
;

GameComponent:
	Scene | TextureRegion | Font
;

Scene:
	'scene'	name=ID (gameBackground=GameBackground)? '{'
		(entities+=GameEntity)*
	'}' | MenuScene
;

MenuScene:
	'menu' name=ID (gameBackground=GameBackground)? '{'
		(menuItems+=GameMenuItem)*
		(entities+=GameEntity)*
	'}'
;

GameBackground:
	'background' (color=Color | textureRegion=[TextureRegion | QualifiedName]) 
;

GameMenuItem:
	'menuitem' name=ID ('text' text=STRING 'font' font=[Font | QualifiedName]  | 'texture' textureRegion=[TextureRegion | QualifiedName])
;

GameEntity:
	SimpleEntity | Line | Text | Rectangle | Sprite | AnimatedSprite
;

SimpleEntity:
	'entity' (name=ID)? position=Position (size=Size)? (color=Color)? '{'
		children+=GameEntity*
	'}'
;

BindingTarget:
	EntityBindingTarget //| SensorBindingTarget
;

//SensorBindingTarget:
//	sensor=SensorTarget
//;

EntityBindingTarget:
	entity=[GameEntity | QualifiedName]	
;

//SensorBindable:
//	isAccelBinding?='accelerometer' | isOrientationBinding?='orientation'
//;

//enum SensorTarget:
//	gravity
//;

EntityModifier:
	MoveModifier | MoveByModifier | ScaleModifier | AlphaModifier | RotationByModifier | RotationModifier | ColorModifier | LoopEntityModifier | SequenceEntityModifier 
;

SequenceEntityModifier:
	'sequence' name=ID modifiers+=[EntityModifier] (',' modifiers+=[EntityModifier])*
;

LoopEntityModifier:
	'loop' name=ID modifiers+=[EntityModifier] (',' modifiers+=[EntityModifier])* ('count' count=INT)?
;

MoveModifier:
	'move' name=ID duration=FLOAT from=FromDouble to=ToDouble
;

MoveByModifier:
	'moveby' name=ID duration=FLOAT by=ByDouble
;

ScaleModifier:
	'scale' name=ID duration=FLOAT from=FromSingle to=ToSingle
;

AlphaModifier:
	'alphamodifier' name=ID duration=FLOAT from=FromSingle to=ToSingle
;

RotationByModifier:
	'rotateby' name=ID duration=FLOAT by=BySingle
;

RotationModifier:
	'rotate' name=ID duration=FLOAT from=FromSingle to=ToSingle
;

ColorModifier: 
	'colormodifier' name=ID duration=FLOAT from=FromTriple to=ToTriple
;

ToTriple:
	'to''('first=FLOAT second=FLOAT third=FLOAT')'
;

FromTriple:
	'from''('first=FLOAT second=FLOAT third=FLOAT')'
;

ToDouble:
	'to''('x=FLOAT y=FLOAT')'
;

FromDouble:
	'from''('x=FLOAT y=FLOAT')'
;

ToSingle:
	'to' '('value=FLOAT')'
;

FromSingle:
	'from''('value=FLOAT')'
;

ByDouble:
	'by''('x=FLOAT y=FLOAT')'	
;

BySingle:
	'by''('value=FLOAT')'
;

Line:
	'line' (name=ID)? from=FromDouble to=ToDouble (color=Color)? ('lineWidth''('lineWidth=FLOAT')')?
;

Text:
	'text' (name=ID)? text=STRING position=Position (color=Color)? font=[Font | QualifiedName] (halign=HorizontalAlign)?
;

Rectangle:
	'rect' (name=ID)? position=Position size=Size color=Color
;

Sprite:
	'sprite' (name=ID)? position=Position (size=Size)? (color=Color)? textureRegion=[TextureRegion | QualifiedName] 
;

AnimatedSprite:
	'animsprite' (name=ID)? position=Position (size=Size)? (color=Color)? textureRegion=[TextureRegion | QualifiedName] animate=INT 
;

Color:
	'color''('(r=FLOAT g=FLOAT b=FLOAT (a=FLOAT)? | constantColor=ConstantColor)')'
;

Position:
	'pos''('x=SignedFloat y=SignedFloat')'
;

Size:
	'size''('w=SignedFloat h=SignedFloat')'
;

TextureRegion:
	'texture' name=ID fileName=STRING (tiled=Tiled)?
;

Tiled:
	'tiled''('column=INT row=INT')'
;

Font:
	'font' name=ID (type=FontType)? size=INT color=Color antialias?='antialias'
;

enum ConstantColor:
	BLACK | WHITE | RED | GREEN | BLUE | YELLOW
;

enum HorizontalAlign:
	LEFT | RIGHT | CENTER
;

enum FontType:
	BOLD | ITALIC | BOLD_ITALIC
;

enum ScreenOrientation:
	landscape | portrait
;

SignedFloat returns ecore::EFloat:
	'-'? FLOAT
;
/* End of AndroGameModelRoot and game model elements */