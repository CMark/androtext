package hu.bme.mit.androtext.gen.entity;

import com.google.inject.Inject;
import hu.bme.mit.androtext.gen.IGenerator;
import hu.bme.mit.androtext.gen.IGeneratorSlots;
import hu.bme.mit.androtext.gen.util.GeneratorExtensions;
import hu.bme.mit.androtext.lang.androTextDsl.AndroDataModelRoot;
import hu.bme.mit.androtext.lang.androTextDsl.AndroidApplication;
import hu.bme.mit.androtext.lang.androTextDsl.AndroidApplicationModelElement;
import hu.bme.mit.androtext.lang.androTextDsl.DatabaseContentProvider;
import hu.bme.mit.androtext.lang.androTextDsl.Entity;
import hu.bme.mit.androtext.lang.androTextDsl.Property;
import hu.bme.mit.androtext.lang.androTextDsl.TargetApplication;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.resource.ResourceSet;
import org.eclipse.xtext.generator.IFileSystemAccess;
import org.eclipse.xtext.xbase.jvmmodel.JvmTypesBuilder;
import org.eclipse.xtext.xbase.lib.IntegerExtensions;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.eclipse.xtext.xbase.lib.StringExtensions;
import org.eclipse.xtext.xtend2.lib.StringConcatenation;

@SuppressWarnings("all")
public class AbstractContentProviderGenerator implements IGenerator {
  @Inject
  private GeneratorExtensions generatorExtensions;
  
  @Inject
  private JvmTypesBuilder _jvmTypesBuilder;
  
  public void doGenerate(final ResourceSet resourceSet, final IFileSystemAccess fsa, final TargetApplication androidApplication) {
    AndroidApplication _application = androidApplication.getApplication();
    EList<AndroidApplicationModelElement> _modelElements = _application.getModelElements();
    Iterable<DatabaseContentProvider> _filter = IterableExtensions.<DatabaseContentProvider>filter(_modelElements, hu.bme.mit.androtext.lang.androTextDsl.DatabaseContentProvider.class);
    for (final DatabaseContentProvider databaseContentProvider : _filter) {
      String _abstractJavaFileName = this.generatorExtensions.abstractJavaFileName(databaseContentProvider);
      StringConcatenation _generate = this.generate(databaseContentProvider, androidApplication);
      fsa.generateFile(_abstractJavaFileName, IGeneratorSlots.DATA_SLOT, _generate);
    }
  }
  
  public StringConcatenation generate(final DatabaseContentProvider contentProvider, final TargetApplication application) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package ");
    String _dataPackageName = this.generatorExtensions.dataPackageName(application);
    _builder.append(_dataPackageName, "");
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    {
      AndroDataModelRoot _datamodel = contentProvider.getDatamodel();
      EList<Entity> _entities = _datamodel.getEntities();
      for(final Entity e : _entities) {
        _builder.append("import ");
        String _dataPackageName_1 = this.generatorExtensions.dataPackageName(application);
        _builder.append(_dataPackageName_1, "");
        _builder.append(".");
        String _dataInformationClassName = this.generatorExtensions.dataInformationClassName(application);
        _builder.append(_dataInformationClassName, "");
        _builder.append(".");
        String _columnsClassName = this.generatorExtensions.columnsClassName(e);
        _builder.append(_columnsClassName, "");
        _builder.append(";");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.newLine();
    _builder.append("import android.content.ContentProvider;");
    _builder.newLine();
    _builder.append("import android.content.ContentUris;");
    _builder.newLine();
    _builder.append("import android.content.ContentValues;");
    _builder.newLine();
    _builder.append("import android.content.Context;");
    _builder.newLine();
    _builder.append("import android.content.UriMatcher;");
    _builder.newLine();
    _builder.append("import android.database.Cursor;");
    _builder.newLine();
    _builder.append("import android.database.SQLException;");
    _builder.newLine();
    _builder.append("import android.database.sqlite.SQLiteDatabase;");
    _builder.newLine();
    _builder.append("import android.database.sqlite.SQLiteOpenHelper;");
    _builder.newLine();
    _builder.append("import android.database.sqlite.SQLiteQueryBuilder;");
    _builder.newLine();
    _builder.append("import android.net.Uri;");
    _builder.newLine();
    _builder.append("import android.text.TextUtils;");
    _builder.newLine();
    _builder.append("import android.util.Log;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import java.util.HashMap;");
    _builder.newLine();
    _builder.newLine();
    StringConcatenation _body = this.body(contentProvider, application);
    _builder.append(_body, "");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    return _builder;
  }
  
  public String query_all(final Entity entity) {
    String _name = entity.getName();
    String _upperCase = _name.toUpperCase();
    String _operator_plus = StringExtensions.operator_plus(_upperCase, "S");
    return _operator_plus;
  }
  
  public String query_one(final Entity entity) {
    String _name = entity.getName();
    String _upperCase = _name.toUpperCase();
    String _operator_plus = StringExtensions.operator_plus(_upperCase, "_ID");
    return _operator_plus;
  }
  
  public String tableNameFieldNameRef(final Entity e) {
    String _columnsClassName = this.generatorExtensions.columnsClassName(e);
    String _operator_plus = StringExtensions.operator_plus(_columnsClassName, ".TABLE_NAME");
    return _operator_plus;
  }
  
  public String projectionFieldName(final Entity e) {
    String _query_all = this.query_all(e);
    String _lowerCase = _query_all.toLowerCase();
    String _firstUpper = StringExtensions.toFirstUpper(_lowerCase);
    String _operator_plus = StringExtensions.operator_plus("s", _firstUpper);
    String _operator_plus_1 = StringExtensions.operator_plus(_operator_plus, "ProjectionMap");
    return _operator_plus_1;
  }
  
  public StringConcatenation body(final DatabaseContentProvider contentProvider, final TargetApplication application) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("public abstract class ");
    String _abstractClassName = this.generatorExtensions.abstractClassName(contentProvider);
    _builder.append(_abstractClassName, "");
    _builder.append(" extends ContentProvider {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("protected static final String TAG = \"");
    String _className = this.generatorExtensions.className(contentProvider);
    _builder.append(_className, "	");
    _builder.append("\";");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("protected static final String DATABASE_NAME = \"");
    String _className_1 = this.generatorExtensions.className(contentProvider);
    String _firstLower = StringExtensions.toFirstLower(_className_1);
    _builder.append(_firstLower, "	");
    _builder.append("db.db\";");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("protected static final int DATABASE_VERSION = 2;");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    {
      AndroDataModelRoot _datamodel = contentProvider.getDatamodel();
      EList<Entity> _entities = _datamodel.getEntities();
      for(final Entity e : _entities) {
        _builder.append("\t");
        _builder.append("protected static final int ");
        String _query_all = this.query_all(e);
        _builder.append(_query_all, "	");
        _builder.append(" = ");
        AndroDataModelRoot _datamodel_1 = contentProvider.getDatamodel();
        EList<Entity> _entities_1 = _datamodel_1.getEntities();
        int _indexOf = _entities_1.indexOf(e);
        int _operator_multiply = IntegerExtensions.operator_multiply(((Integer)2), ((Integer)_indexOf));
        int _operator_plus = IntegerExtensions.operator_plus(((Integer)_operator_multiply), ((Integer)1));
        _builder.append(_operator_plus, "	");
        _builder.append(";");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("protected static final int ");
        String _query_one = this.query_one(e);
        _builder.append(_query_one, "	");
        _builder.append(" = ");
        AndroDataModelRoot _datamodel_2 = contentProvider.getDatamodel();
        EList<Entity> _entities_2 = _datamodel_2.getEntities();
        int _indexOf_1 = _entities_2.indexOf(e);
        int _operator_multiply_1 = IntegerExtensions.operator_multiply(((Integer)2), ((Integer)_indexOf_1));
        int _operator_plus_1 = IntegerExtensions.operator_plus(((Integer)_operator_multiply_1), ((Integer)2));
        _builder.append(_operator_plus_1, "	");
        _builder.append(";");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("\t");
    _builder.newLine();
    {
      AndroDataModelRoot _datamodel_3 = contentProvider.getDatamodel();
      EList<Entity> _entities_3 = _datamodel_3.getEntities();
      for(final Entity e_1 : _entities_3) {
        _builder.append("\t");
        _builder.append("protected static HashMap<String, String> ");
        String _projectionFieldName = this.projectionFieldName(e_1);
        _builder.append(_projectionFieldName, "	");
        _builder.append(";");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("protected static final UriMatcher sUriMatcher;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("protected DatabaseHelper mOpenHelper;");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* This class helps open, create, and upgrade the database file.");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private static class DatabaseHelper extends SQLiteOpenHelper {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("DatabaseHelper(Context context) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("super(context, DATABASE_NAME, null, DATABASE_VERSION);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("public void onCreate(SQLiteDatabase db) {");
    _builder.newLine();
    {
      AndroDataModelRoot _datamodel_4 = contentProvider.getDatamodel();
      EList<Entity> _entities_4 = _datamodel_4.getEntities();
      for(final Entity e_2 : _entities_4) {
        _builder.append("        \t");
        _builder.append("db.execSQL(\"CREATE TABLE \" + ");
        String _tableNameFieldNameRef = this.tableNameFieldNameRef(e_2);
        _builder.append(_tableNameFieldNameRef, "        	");
        _builder.append(" + \" (\"");
        _builder.newLineIfNotEmpty();
        _builder.append("        \t");
        _builder.append("\t");
        _builder.append("+ ");
        String _columnsClassName = this.generatorExtensions.columnsClassName(e_2);
        _builder.append(_columnsClassName, "        		");
        _builder.append("._ID + \" INTEGER PRIMARY KEY,\"");
        _builder.newLineIfNotEmpty();
        _builder.append("        \t");
        _builder.append("\t");
        {
          EList<Property> _properties = e_2.getProperties();
          boolean hasAnyElements = false;
          for(final Property p : _properties) {
            if (!hasAnyElements) {
              hasAnyElements = true;
            } else {
              _builder.appendImmediate(",\" ", "        		");
            }
            _builder.append("+ ");
            String _columnsClassName_1 = this.generatorExtensions.columnsClassName(e_2);
            _builder.append(_columnsClassName_1, "        		");
            _builder.append(".");
            String _name = p.getName();
            String _upperCase = _name.toUpperCase();
            _builder.append(_upperCase, "        		");
            _builder.append(" + \" ");
            String _columnType = this.generatorExtensions.columnType(p);
            _builder.append(_columnType, "        		");
          }
        }
        _builder.append("\"+ \");\");");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("Log.w(TAG, \"Upgrading database from version \" + oldVersion + \" to \"");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("+ newVersion + \", which will destroy all old data\");");
    _builder.newLine();
    {
      AndroDataModelRoot _datamodel_5 = contentProvider.getDatamodel();
      EList<Entity> _entities_5 = _datamodel_5.getEntities();
      for(final Entity e_3 : _entities_5) {
        _builder.append("            ");
        _builder.append("db.execSQL(\"DROP TABLE IF EXISTS \" + ");
        String _tableNameFieldNameRef_1 = this.tableNameFieldNameRef(e_3);
        _builder.append(_tableNameFieldNameRef_1, "            ");
        _builder.append(");");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("            ");
    _builder.append("onCreate(db);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public boolean onCreate() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("mOpenHelper = new DatabaseHelper(getContext());");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return true;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public Cursor query(Uri uri, String[] projection, String selection, String[] selectionArgs,");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("String sortOrder) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("SQLiteQueryBuilder qb = new SQLiteQueryBuilder();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("int match = sUriMatcher.match(uri);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("String orderBy;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("switch (match) {");
    _builder.newLine();
    {
      AndroDataModelRoot _datamodel_6 = contentProvider.getDatamodel();
      EList<Entity> _entities_6 = _datamodel_6.getEntities();
      for(final Entity e_4 : _entities_6) {
        _builder.append("\t\t");
        _builder.append("case ");
        String _query_all_1 = this.query_all(e_4);
        _builder.append(_query_all_1, "		");
        _builder.append(":");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t");
        _builder.append("\t");
        _builder.append("qb.setTables(");
        String _tableNameFieldNameRef_2 = this.tableNameFieldNameRef(e_4);
        _builder.append(_tableNameFieldNameRef_2, "			");
        _builder.append(");");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t");
        _builder.append("\t");
        _builder.append("qb.setProjectionMap(");
        String _projectionFieldName_1 = this.projectionFieldName(e_4);
        _builder.append(_projectionFieldName_1, "			");
        _builder.append(");");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t");
        _builder.append("\t");
        _builder.append("// If no sort order is specified use the default");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("\t");
        _builder.append("if (TextUtils.isEmpty(sortOrder)) {");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("\t\t");
        _builder.append("orderBy = ");
        String _columnsClassName_2 = this.generatorExtensions.columnsClassName(e_4);
        _builder.append(_columnsClassName_2, "				");
        _builder.append(".DEFAULT_SORT_ORDER;");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t");
        _builder.append("\t");
        _builder.append("} else {");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("\t\t");
        _builder.append("orderBy = sortOrder;");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("\t");
        _builder.append("}");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("\t");
        _builder.append("break;");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("case ");
        String _query_one_1 = this.query_one(e_4);
        _builder.append(_query_one_1, "		");
        _builder.append(":");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t");
        _builder.append("\t");
        _builder.append("qb.setTables(");
        String _tableNameFieldNameRef_3 = this.tableNameFieldNameRef(e_4);
        _builder.append(_tableNameFieldNameRef_3, "			");
        _builder.append(");");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t");
        _builder.append("\t");
        _builder.append("qb.setProjectionMap(");
        String _projectionFieldName_2 = this.projectionFieldName(e_4);
        _builder.append(_projectionFieldName_2, "			");
        _builder.append(");");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t");
        _builder.append("\t");
        _builder.append("qb.appendWhere(");
        String _columnsClassName_3 = this.generatorExtensions.columnsClassName(e_4);
        _builder.append(_columnsClassName_3, "			");
        _builder.append("._ID + \"=\" + uri.getPathSegments().get(1));");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t");
        _builder.append("\t");
        _builder.append("// If no sort order is specified use the default");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("\t");
        _builder.append("if (TextUtils.isEmpty(sortOrder)) {");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("\t\t");
        _builder.append("orderBy = ");
        String _columnsClassName_4 = this.generatorExtensions.columnsClassName(e_4);
        _builder.append(_columnsClassName_4, "				");
        _builder.append(".DEFAULT_SORT_ORDER;");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t");
        _builder.append("\t");
        _builder.append("} else {");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("\t\t");
        _builder.append("orderBy = sortOrder;");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("\t");
        _builder.append("}");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("\t");
        _builder.append("break;");
        _builder.newLine();
      }
    }
    _builder.newLine();
    _builder.append("        ");
    _builder.append("default:");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("throw new IllegalArgumentException(\"Unknown URI \" + uri);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("// Get the database and run the query");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("SQLiteDatabase db = mOpenHelper.getReadableDatabase();");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("Cursor c = qb.query(db, projection, selection, selectionArgs, null, null, orderBy);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("// Tell the cursor what uri to watch, so it knows when its source data changes");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("c.setNotificationUri(getContext().getContentResolver(), uri);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return c;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public String getType(Uri uri) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("switch (sUriMatcher.match(uri)) {");
    _builder.newLine();
    {
      AndroDataModelRoot _datamodel_7 = contentProvider.getDatamodel();
      EList<Entity> _entities_7 = _datamodel_7.getEntities();
      for(final Entity e_5 : _entities_7) {
        _builder.append("        ");
        _builder.append("case ");
        String _query_all_2 = this.query_all(e_5);
        _builder.append(_query_all_2, "        ");
        _builder.append(":");
        _builder.newLineIfNotEmpty();
        _builder.append("        ");
        _builder.append("    ");
        _builder.append("return ");
        String _columnsClassName_5 = this.generatorExtensions.columnsClassName(e_5);
        _builder.append(_columnsClassName_5, "            ");
        _builder.append(".CONTENT_TYPE;");
        _builder.newLineIfNotEmpty();
        _builder.append("        ");
        _builder.append("case ");
        String _query_one_2 = this.query_one(e_5);
        _builder.append(_query_one_2, "        ");
        _builder.append(":");
        _builder.newLineIfNotEmpty();
        _builder.append("        ");
        _builder.append("    ");
        _builder.append("return ");
        String _columnsClassName_6 = this.generatorExtensions.columnsClassName(e_5);
        _builder.append(_columnsClassName_6, "            ");
        _builder.append(".CONTENT_ITEM_TYPE;");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("        ");
    _builder.append("default:");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("throw new IllegalArgumentException(\"Unknown URI \" + uri);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public Uri insert(Uri uri, ContentValues initialValues) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("String tableName = null;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("Uri contentUri = null;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("switch (sUriMatcher.match(uri)) {");
    _builder.newLine();
    {
      AndroDataModelRoot _datamodel_8 = contentProvider.getDatamodel();
      EList<Entity> _entities_8 = _datamodel_8.getEntities();
      for(final Entity e_6 : _entities_8) {
        _builder.append("        ");
        _builder.append("case ");
        String _query_all_3 = this.query_all(e_6);
        _builder.append(_query_all_3, "        ");
        _builder.append(":");
        _builder.newLineIfNotEmpty();
        _builder.append("        ");
        _builder.append("    ");
        _builder.append("tableName = ");
        String _tableNameFieldNameRef_4 = this.tableNameFieldNameRef(e_6);
        _builder.append(_tableNameFieldNameRef_4, "            ");
        _builder.append(";");
        _builder.newLineIfNotEmpty();
        _builder.append("        ");
        _builder.append("    ");
        _builder.append("contentUri = ");
        String _columnsClassName_7 = this.generatorExtensions.columnsClassName(e_6);
        _builder.append(_columnsClassName_7, "            ");
        _builder.append(".CONTENT_URI;");
        _builder.newLineIfNotEmpty();
        _builder.append("        ");
        _builder.append("    ");
        _builder.append("break;");
        _builder.newLine();
      }
    }
    _builder.append("        ");
    _builder.append("default:");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("throw new IllegalArgumentException(\"Unknown URI \" + uri);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("ContentValues values;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if (initialValues != null) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("values = new ContentValues(initialValues);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("} else {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("values = new ContentValues();");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("setDefaultValuesFor(uri, values);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("SQLiteDatabase db = mOpenHelper.getWritableDatabase();");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("long rowId = db.insert(tableName, getNullColumnHack(uri), values);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if (rowId > 0) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("Uri newUri = ContentUris.withAppendedId(contentUri, rowId);");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("getContext().getContentResolver().notifyChange(newUri, null);");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("return uri;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("throw new SQLException(\"Failed to insert row into \" + uri);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public int delete(Uri uri, String where, String[] whereArgs) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("SQLiteDatabase db = mOpenHelper.getWritableDatabase();");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("int count;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("switch (sUriMatcher.match(uri)) {");
    _builder.newLine();
    {
      AndroDataModelRoot _datamodel_9 = contentProvider.getDatamodel();
      EList<Entity> _entities_9 = _datamodel_9.getEntities();
      for(final Entity e_7 : _entities_9) {
        _builder.append("        ");
        _builder.append("case ");
        String _query_all_4 = this.query_all(e_7);
        _builder.append(_query_all_4, "        ");
        _builder.append(":");
        _builder.newLineIfNotEmpty();
        _builder.append("        ");
        _builder.append("\t");
        _builder.append("count = db.delete(");
        String _tableNameFieldNameRef_5 = this.tableNameFieldNameRef(e_7);
        _builder.append(_tableNameFieldNameRef_5, "        	");
        _builder.append(", where, whereArgs);");
        _builder.newLineIfNotEmpty();
        _builder.append("        ");
        _builder.append("\t");
        _builder.append("break;");
        _builder.newLine();
        _builder.append("        ");
        _builder.append("case ");
        String _query_one_3 = this.query_one(e_7);
        _builder.append(_query_one_3, "        ");
        _builder.append(":");
        _builder.newLineIfNotEmpty();
        _builder.append("        ");
        _builder.append("\t");
        _builder.append("String ");
        String _name_1 = e_7.getName();
        String _lowerCase = _name_1.toLowerCase();
        _builder.append(_lowerCase, "        	");
        _builder.append("Id = uri.getPathSegments().get(1);");
        _builder.newLineIfNotEmpty();
        _builder.append("        ");
        _builder.append("\t");
        _builder.append("count = db.delete(");
        String _tableNameFieldNameRef_6 = this.tableNameFieldNameRef(e_7);
        _builder.append(_tableNameFieldNameRef_6, "        	");
        _builder.append(", ");
        String _columnsClassName_8 = this.generatorExtensions.columnsClassName(e_7);
        _builder.append(_columnsClassName_8, "        	");
        _builder.append("._ID + \"=\" + ");
        String _name_2 = e_7.getName();
        String _lowerCase_1 = _name_2.toLowerCase();
        _builder.append(_lowerCase_1, "        	");
        _builder.append("Id");
        _builder.newLineIfNotEmpty();
        _builder.append("        ");
        _builder.append("            ");
        _builder.append("+ (!TextUtils.isEmpty(where) ? \" AND (\" + where + \')\' : \"\"), whereArgs);");
        _builder.newLine();
        _builder.append("        ");
        _builder.append("\t");
        _builder.append("break;");
        _builder.newLine();
      }
    }
    _builder.append("        ");
    _builder.append("default:");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("throw new IllegalArgumentException(\"Unknown URI \" + uri);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("getContext().getContentResolver().notifyChange(uri, null);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return count;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public int update(Uri uri, ContentValues values, String where, String[] whereArgs) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("SQLiteDatabase db = mOpenHelper.getWritableDatabase();");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("int count;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("switch (sUriMatcher.match(uri)) {");
    _builder.newLine();
    {
      AndroDataModelRoot _datamodel_10 = contentProvider.getDatamodel();
      EList<Entity> _entities_10 = _datamodel_10.getEntities();
      for(final Entity e_8 : _entities_10) {
        _builder.append("        ");
        _builder.append("case ");
        String _query_all_5 = this.query_all(e_8);
        _builder.append(_query_all_5, "        ");
        _builder.append(":");
        _builder.newLineIfNotEmpty();
        _builder.append("        ");
        _builder.append("\t");
        _builder.append("count = db.update(");
        String _tableNameFieldNameRef_7 = this.tableNameFieldNameRef(e_8);
        _builder.append(_tableNameFieldNameRef_7, "        	");
        _builder.append(", values, where, whereArgs);");
        _builder.newLineIfNotEmpty();
        _builder.append("        ");
        _builder.append("\t");
        _builder.append("break;");
        _builder.newLine();
        _builder.append("        ");
        _builder.append("case ");
        String _query_one_4 = this.query_one(e_8);
        _builder.append(_query_one_4, "        ");
        _builder.append(":");
        _builder.newLineIfNotEmpty();
        _builder.append("        ");
        _builder.append("\t");
        _builder.append("String ");
        String _name_3 = e_8.getName();
        String _lowerCase_2 = _name_3.toLowerCase();
        _builder.append(_lowerCase_2, "        	");
        _builder.append("Id = uri.getPathSegments().get(1);");
        _builder.newLineIfNotEmpty();
        _builder.append("        ");
        _builder.append("\t");
        _builder.append("count = db.update(");
        String _tableNameFieldNameRef_8 = this.tableNameFieldNameRef(e_8);
        _builder.append(_tableNameFieldNameRef_8, "        	");
        _builder.append(", values, ");
        String _columnsClassName_9 = this.generatorExtensions.columnsClassName(e_8);
        _builder.append(_columnsClassName_9, "        	");
        _builder.append("._ID + \"=\" + ");
        String _name_4 = e_8.getName();
        String _lowerCase_3 = _name_4.toLowerCase();
        _builder.append(_lowerCase_3, "        	");
        _builder.append("Id");
        _builder.newLineIfNotEmpty();
        _builder.append("        ");
        _builder.append("            ");
        _builder.append("+ (!TextUtils.isEmpty(where) ? \" AND (\" + where + \')\' : \"\"), whereArgs);");
        _builder.newLine();
        _builder.append("        ");
        _builder.append("\t");
        _builder.append("break;");
        _builder.newLine();
      }
    }
    _builder.newLine();
    _builder.append("        ");
    _builder.append("default:");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("throw new IllegalArgumentException(\"Unknown URI \" + uri);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("getContext().getContentResolver().notifyChange(uri, null);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return count;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("abstract protected String getNullColumnHack(Uri uri);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("abstract protected void setDefaultValuesFor(Uri uri, ContentValues values);");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("static {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("sUriMatcher = new UriMatcher(UriMatcher.NO_MATCH);");
    _builder.newLine();
    {
      AndroDataModelRoot _datamodel_11 = contentProvider.getDatamodel();
      EList<Entity> _entities_11 = _datamodel_11.getEntities();
      for(final Entity e_9 : _entities_11) {
        _builder.append("        ");
        _builder.append("sUriMatcher.addURI(");
        String _dataInformationClassName = this.generatorExtensions.dataInformationClassName(application);
        _builder.append(_dataInformationClassName, "        ");
        _builder.append(".AUTHORITY, \"");
        String _path_uri = this.generatorExtensions.path_uri(e_9);
        _builder.append(_path_uri, "        ");
        _builder.append("\", ");
        String _query_all_6 = this.query_all(e_9);
        _builder.append(_query_all_6, "        ");
        _builder.append(");");
        _builder.newLineIfNotEmpty();
        _builder.append("        ");
        _builder.append("sUriMatcher.addURI(");
        String _dataInformationClassName_1 = this.generatorExtensions.dataInformationClassName(application);
        _builder.append(_dataInformationClassName_1, "        ");
        _builder.append(".AUTHORITY, \"");
        String _path_id_uri = this.generatorExtensions.path_id_uri(e_9);
        _builder.append(_path_id_uri, "        ");
        _builder.append("#\", ");
        String _query_one_5 = this.query_one(e_9);
        _builder.append(_query_one_5, "        ");
        _builder.append(");");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.newLine();
    {
      AndroDataModelRoot _datamodel_12 = contentProvider.getDatamodel();
      EList<Entity> _entities_12 = _datamodel_12.getEntities();
      for(final Entity e_10 : _entities_12) {
        _builder.append("        ");
        String _projectionFieldName_3 = this.projectionFieldName(e_10);
        _builder.append(_projectionFieldName_3, "        ");
        _builder.append(" = new HashMap<String, String>();");
        _builder.newLineIfNotEmpty();
        _builder.append("        ");
        String _projectionFieldName_4 = this.projectionFieldName(e_10);
        _builder.append(_projectionFieldName_4, "        ");
        _builder.append(".put(");
        String _columnsClassName_10 = this.generatorExtensions.columnsClassName(e_10);
        _builder.append(_columnsClassName_10, "        ");
        _builder.append("._ID, ");
        String _columnsClassName_11 = this.generatorExtensions.columnsClassName(e_10);
        _builder.append(_columnsClassName_11, "        ");
        _builder.append("._ID);");
        _builder.newLineIfNotEmpty();
        {
          EList<Property> _properties_1 = e_10.getProperties();
          for(final Property p_1 : _properties_1) {
            _builder.append("        ");
            String _projectionFieldName_5 = this.projectionFieldName(e_10);
            _builder.append(_projectionFieldName_5, "        ");
            _builder.append(".put(");
            String _columnsClassName_12 = this.generatorExtensions.columnsClassName(e_10);
            _builder.append(_columnsClassName_12, "        ");
            _builder.append(".");
            String _name_5 = p_1.getName();
            String _upperCase_1 = _name_5.toUpperCase();
            _builder.append(_upperCase_1, "        ");
            _builder.append(", ");
            String _columnsClassName_13 = this.generatorExtensions.columnsClassName(e_10);
            _builder.append(_columnsClassName_13, "        ");
            _builder.append(".");
            String _name_6 = p_1.getName();
            String _upperCase_2 = _name_6.toUpperCase();
            _builder.append(_upperCase_2, "        ");
            _builder.append(");");
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
}
